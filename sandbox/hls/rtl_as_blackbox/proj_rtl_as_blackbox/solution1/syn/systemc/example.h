// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _example_HH_
#define _example_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rtl_model.h"

namespace ap_rtl {

struct example : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<10> > a1_V;
    sc_in< sc_lv<10> > a2_V;
    sc_in< sc_lv<10> > a3_V;
    sc_in< sc_lv<10> > a4_V;
    sc_in< sc_lv<10> > b1_V;
    sc_in< sc_lv<10> > b2_V;
    sc_in< sc_lv<10> > b3_V;
    sc_in< sc_lv<10> > b4_V;
    sc_out< sc_lv<10> > sigma_V;
    sc_out< sc_logic > sigma_V_ap_vld;


    // Module declarations
    example(sc_module_name name);
    SC_HAS_PROCESS(example);

    ~example();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    rtl_model* grp_rtl_model_fu_103;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_rtl_model_fu_103_ap_start;
    sc_signal< sc_logic > grp_rtl_model_fu_103_ap_ce;
    sc_signal< sc_logic > grp_rtl_model_fu_103_ap_done;
    sc_signal< sc_logic > grp_rtl_model_fu_103_ap_ready;
    sc_signal< sc_logic > grp_rtl_model_fu_103_ap_continue;
    sc_signal< sc_lv<10> > grp_rtl_model_fu_103_z1;
    sc_signal< sc_logic > grp_rtl_model_fu_103_z1_ap_vld;
    sc_signal< sc_lv<10> > grp_rtl_model_fu_103_z2;
    sc_signal< sc_logic > grp_rtl_model_fu_103_z2_ap_vld;
    sc_signal< sc_lv<10> > grp_rtl_model_fu_103_z3;
    sc_signal< sc_logic > grp_rtl_model_fu_103_z3_ap_vld;
    sc_signal< sc_lv<10> > grp_rtl_model_fu_103_z4;
    sc_signal< sc_logic > grp_rtl_model_fu_103_z4_ap_vld;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<10> > tmp1_V_fu_32;
    sc_signal< sc_lv<10> > tmp2_V_fu_36;
    sc_signal< sc_lv<10> > tmp3_V_fu_40;
    sc_signal< sc_lv<10> > tmp4_V_fu_44;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > add_ln68_1_fu_145_p2;
    sc_signal< sc_lv<10> > add_ln68_fu_139_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln68_1_fu_145_p2();
    void thread_add_ln68_fu_139_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_rtl_model_fu_103_ap_ce();
    void thread_grp_rtl_model_fu_103_ap_continue();
    void thread_grp_rtl_model_fu_103_ap_start();
    void thread_sigma_V();
    void thread_sigma_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
