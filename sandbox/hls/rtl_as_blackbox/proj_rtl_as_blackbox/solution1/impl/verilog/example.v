// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=44,HLS_SYN_LUT=81,HLS_VERSION=2019_2}" *)

module example (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a1_V,
        a2_V,
        a3_V,
        a4_V,
        b1_V,
        b2_V,
        b3_V,
        b4_V,
        sigma_V,
        sigma_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] a1_V;
input  [9:0] a2_V;
input  [9:0] a3_V;
input  [9:0] a4_V;
input  [9:0] b1_V;
input  [9:0] b2_V;
input  [9:0] b3_V;
input  [9:0] b4_V;
output  [9:0] sigma_V;
output   sigma_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sigma_V_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    grp_rtl_model_fu_103_ap_start;
reg    grp_rtl_model_fu_103_ap_ce;
wire    grp_rtl_model_fu_103_ap_done;
wire    grp_rtl_model_fu_103_ap_ready;
wire    grp_rtl_model_fu_103_ap_continue;
wire   [9:0] grp_rtl_model_fu_103_z1;
wire    grp_rtl_model_fu_103_z1_ap_vld;
wire   [9:0] grp_rtl_model_fu_103_z2;
wire    grp_rtl_model_fu_103_z2_ap_vld;
wire   [9:0] grp_rtl_model_fu_103_z3;
wire    grp_rtl_model_fu_103_z3_ap_vld;
wire   [9:0] grp_rtl_model_fu_103_z4;
wire    grp_rtl_model_fu_103_z4_ap_vld;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [9:0] tmp1_V_fu_32;
reg   [9:0] tmp2_V_fu_36;
reg   [9:0] tmp3_V_fu_40;
reg   [9:0] tmp4_V_fu_44;
wire    ap_CS_fsm_state4;
wire   [9:0] add_ln68_1_fu_145_p2;
wire   [9:0] add_ln68_fu_139_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

rtl_model grp_rtl_model_fu_103(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rtl_model_fu_103_ap_start),
    .ap_ce(grp_rtl_model_fu_103_ap_ce),
    .ap_done(grp_rtl_model_fu_103_ap_done),
    .ap_ready(grp_rtl_model_fu_103_ap_ready),
    .ap_continue(grp_rtl_model_fu_103_ap_continue),
    .a1(a1_V),
    .a2(a2_V),
    .a3(a3_V),
    .a4(a4_V),
    .b1(b1_V),
    .b2(b2_V),
    .b3(b3_V),
    .b4(b4_V),
    .z1(grp_rtl_model_fu_103_z1),
    .z1_ap_vld(grp_rtl_model_fu_103_z1_ap_vld),
    .z2(grp_rtl_model_fu_103_z2),
    .z2_ap_vld(grp_rtl_model_fu_103_z2_ap_vld),
    .z3(grp_rtl_model_fu_103_z3),
    .z3_ap_vld(grp_rtl_model_fu_103_z3_ap_vld),
    .z4(grp_rtl_model_fu_103_z4),
    .z4_ap_vld(grp_rtl_model_fu_103_z4_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (grp_rtl_model_fu_103_z1_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (grp_rtl_model_fu_103_z1_ap_vld == 1'b1)) | ((grp_rtl_model_fu_103_z1_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp1_V_fu_32 <= grp_rtl_model_fu_103_z1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (grp_rtl_model_fu_103_z2_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (grp_rtl_model_fu_103_z2_ap_vld == 1'b1)) | ((grp_rtl_model_fu_103_z2_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp2_V_fu_36 <= grp_rtl_model_fu_103_z2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (grp_rtl_model_fu_103_z3_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (grp_rtl_model_fu_103_z3_ap_vld == 1'b1)) | ((grp_rtl_model_fu_103_z3_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp3_V_fu_40 <= grp_rtl_model_fu_103_z3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (grp_rtl_model_fu_103_z4_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (grp_rtl_model_fu_103_z4_ap_vld == 1'b1)) | ((grp_rtl_model_fu_103_z4_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp4_V_fu_44 <= grp_rtl_model_fu_103_z4;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_rtl_model_fu_103_ap_ce = 1'b1;
    end else begin
        grp_rtl_model_fu_103_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_rtl_model_fu_103_ap_start = 1'b1;
    end else begin
        grp_rtl_model_fu_103_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sigma_V_ap_vld = 1'b1;
    end else begin
        sigma_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_rtl_model_fu_103_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_1_fu_145_p2 = (tmp3_V_fu_40 + tmp4_V_fu_44);

assign add_ln68_fu_139_p2 = (tmp2_V_fu_36 + tmp1_V_fu_32);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_rtl_model_fu_103_ap_continue = 1'b1;

assign sigma_V = (add_ln68_1_fu_145_p2 + add_ln68_fu_139_p2);

endmodule //example
