// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixmul_HH_
#define _matrixmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrixmul_mac_mulbkb.h"

namespace ap_rtl {

struct matrixmul : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<8> > a_q0;
    sc_out< sc_lv<4> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<8> > b_q0;
    sc_out< sc_lv<4> > res_address0;
    sc_out< sc_logic > res_ce0;
    sc_out< sc_logic > res_we0;
    sc_out< sc_lv<16> > res_d0;


    // Module declarations
    matrixmul(sc_module_name name);
    SC_HAS_PROCESS(matrixmul);

    ~matrixmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrixmul_mac_mulbkb<1,1,8,8,16,16>* matrixmul_mac_mulbkb_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten14_reg_102;
    sc_signal< sc_lv<2> > i_0_reg_113;
    sc_signal< sc_lv<4> > indvar_flatten_reg_124;
    sc_signal< sc_lv<2> > j_0_reg_135;
    sc_signal< sc_lv<16> > temp_0_reg_146;
    sc_signal< sc_lv<2> > k_0_reg_158;
    sc_signal< sc_lv<1> > icmp_ln104_fu_169_p2;
    sc_signal< sc_lv<1> > icmp_ln104_reg_385;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<5> > add_ln104_fu_175_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln111_1_fu_201_p3;
    sc_signal< sc_lv<2> > select_ln111_1_reg_394;
    sc_signal< sc_lv<1> > or_ln111_fu_255_p2;
    sc_signal< sc_lv<1> > or_ln111_reg_399;
    sc_signal< sc_lv<2> > select_ln111_4_fu_269_p3;
    sc_signal< sc_lv<2> > select_ln111_4_reg_404;
    sc_signal< sc_lv<4> > res_addr_reg_409;
    sc_signal< sc_lv<2> > k_fu_336_p2;
    sc_signal< sc_lv<2> > k_reg_424;
    sc_signal< sc_lv<4> > select_ln105_fu_348_p3;
    sc_signal< sc_lv<16> > grp_fu_376_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<2> > ap_phi_mux_i_0_phi_fu_117_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_j_0_phi_fu_139_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_k_0_phi_fu_162_p4;
    sc_signal< sc_lv<64> > sext_ln113_fu_287_p1;
    sc_signal< sc_lv<64> > sext_ln111_2_fu_302_p1;
    sc_signal< sc_lv<64> > sext_ln111_3_fu_331_p1;
    sc_signal< sc_lv<1> > icmp_ln109_1_fu_371_p2;
    sc_signal< sc_lv<1> > icmp_ln105_fu_187_p2;
    sc_signal< sc_lv<2> > i_fu_181_p2;
    sc_signal< sc_lv<4> > tmp_fu_213_p3;
    sc_signal< sc_lv<5> > zext_ln111_1_fu_221_p1;
    sc_signal< sc_lv<5> > zext_ln111_fu_209_p1;
    sc_signal< sc_lv<1> > icmp_ln109_fu_237_p2;
    sc_signal< sc_lv<1> > xor_ln111_fu_231_p2;
    sc_signal< sc_lv<2> > select_ln111_fu_193_p3;
    sc_signal< sc_lv<1> > and_ln111_fu_243_p2;
    sc_signal< sc_lv<2> > j_fu_249_p2;
    sc_signal< sc_lv<5> > sub_ln111_fu_225_p2;
    sc_signal< sc_lv<5> > zext_ln111_2_fu_277_p1;
    sc_signal< sc_lv<5> > add_ln113_fu_281_p2;
    sc_signal< sc_lv<2> > select_ln111_3_fu_261_p3;
    sc_signal< sc_lv<5> > zext_ln111_3_fu_292_p1;
    sc_signal< sc_lv<5> > add_ln111_fu_296_p2;
    sc_signal< sc_lv<4> > tmp_1_fu_307_p3;
    sc_signal< sc_lv<5> > zext_ln111_4_fu_315_p1;
    sc_signal< sc_lv<5> > sub_ln111_1_fu_319_p2;
    sc_signal< sc_lv<5> > add_ln111_1_fu_325_p2;
    sc_signal< sc_lv<4> > add_ln105_fu_342_p2;
    sc_signal< sc_lv<16> > grp_fu_376_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_1B;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_add_ln104_fu_175_p2();
    void thread_add_ln105_fu_342_p2();
    void thread_add_ln111_1_fu_325_p2();
    void thread_add_ln111_fu_296_p2();
    void thread_add_ln113_fu_281_p2();
    void thread_and_ln111_fu_243_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_117_p4();
    void thread_ap_phi_mux_j_0_phi_fu_139_p4();
    void thread_ap_phi_mux_k_0_phi_fu_162_p4();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_grp_fu_376_p2();
    void thread_i_fu_181_p2();
    void thread_icmp_ln104_fu_169_p2();
    void thread_icmp_ln105_fu_187_p2();
    void thread_icmp_ln109_1_fu_371_p2();
    void thread_icmp_ln109_fu_237_p2();
    void thread_j_fu_249_p2();
    void thread_k_fu_336_p2();
    void thread_or_ln111_fu_255_p2();
    void thread_res_address0();
    void thread_res_ce0();
    void thread_res_d0();
    void thread_res_we0();
    void thread_select_ln105_fu_348_p3();
    void thread_select_ln111_1_fu_201_p3();
    void thread_select_ln111_3_fu_261_p3();
    void thread_select_ln111_4_fu_269_p3();
    void thread_select_ln111_fu_193_p3();
    void thread_sext_ln111_2_fu_302_p1();
    void thread_sext_ln111_3_fu_331_p1();
    void thread_sext_ln113_fu_287_p1();
    void thread_sub_ln111_1_fu_319_p2();
    void thread_sub_ln111_fu_225_p2();
    void thread_tmp_1_fu_307_p3();
    void thread_tmp_fu_213_p3();
    void thread_xor_ln111_fu_231_p2();
    void thread_zext_ln111_1_fu_221_p1();
    void thread_zext_ln111_2_fu_277_p1();
    void thread_zext_ln111_3_fu_292_p1();
    void thread_zext_ln111_4_fu_315_p1();
    void thread_zext_ln111_fu_209_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
