// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.640000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=48,HLS_SYN_LUT=330,HLS_VERSION=2019_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten14_reg_102;
reg   [1:0] i_0_reg_113;
reg   [3:0] indvar_flatten_reg_124;
reg   [1:0] j_0_reg_135;
reg   [15:0] temp_0_reg_146;
reg   [1:0] k_0_reg_158;
wire   [0:0] icmp_ln104_fu_169_p2;
reg   [0:0] icmp_ln104_reg_385;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln104_fu_175_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln111_1_fu_201_p3;
reg   [1:0] select_ln111_1_reg_394;
wire   [0:0] or_ln111_fu_255_p2;
reg   [0:0] or_ln111_reg_399;
wire   [1:0] select_ln111_4_fu_269_p3;
reg   [1:0] select_ln111_4_reg_404;
reg   [3:0] res_addr_reg_409;
wire   [1:0] k_fu_336_p2;
reg   [1:0] k_reg_424;
wire   [3:0] select_ln105_fu_348_p3;
wire  signed [15:0] grp_fu_376_p3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] ap_phi_mux_i_0_phi_fu_117_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_j_0_phi_fu_139_p4;
reg   [1:0] ap_phi_mux_k_0_phi_fu_162_p4;
wire  signed [63:0] sext_ln113_fu_287_p1;
wire  signed [63:0] sext_ln111_2_fu_302_p1;
wire  signed [63:0] sext_ln111_3_fu_331_p1;
wire   [0:0] icmp_ln109_1_fu_371_p2;
wire   [0:0] icmp_ln105_fu_187_p2;
wire   [1:0] i_fu_181_p2;
wire   [3:0] tmp_fu_213_p3;
wire   [4:0] zext_ln111_1_fu_221_p1;
wire   [4:0] zext_ln111_fu_209_p1;
wire   [0:0] icmp_ln109_fu_237_p2;
wire   [0:0] xor_ln111_fu_231_p2;
wire   [1:0] select_ln111_fu_193_p3;
wire   [0:0] and_ln111_fu_243_p2;
wire   [1:0] j_fu_249_p2;
wire   [4:0] sub_ln111_fu_225_p2;
wire   [4:0] zext_ln111_2_fu_277_p1;
wire   [4:0] add_ln113_fu_281_p2;
wire   [1:0] select_ln111_3_fu_261_p3;
wire   [4:0] zext_ln111_3_fu_292_p1;
wire   [4:0] add_ln111_fu_296_p2;
wire   [3:0] tmp_1_fu_307_p3;
wire   [4:0] zext_ln111_4_fu_315_p1;
wire   [4:0] sub_ln111_1_fu_319_p2;
wire   [4:0] add_ln111_1_fu_325_p2;
wire   [3:0] add_ln105_fu_342_p2;
wire   [15:0] grp_fu_376_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U1(
    .din0(b_q0),
    .din1(a_q0),
    .din2(grp_fu_376_p2),
    .dout(grp_fu_376_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_113 <= select_ln111_1_reg_394;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_113 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_fu_169_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten14_reg_102 <= add_ln104_fu_175_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten14_reg_102 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_fu_169_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_124 <= select_ln105_fu_348_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_124 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_135 <= select_ln111_4_reg_404;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_135 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_0_reg_158 <= k_reg_424;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_158 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_0_reg_146 <= grp_fu_376_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        temp_0_reg_146 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln104_reg_385 <= icmp_ln104_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_fu_169_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_424 <= k_fu_336_p2;
        select_ln111_1_reg_394 <= select_ln111_1_fu_201_p3;
        select_ln111_4_reg_404 <= select_ln111_4_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln104_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln111_reg_399 <= or_ln111_fu_255_p2;
        res_addr_reg_409 <= sext_ln113_fu_287_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln104_fu_169_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_117_p4 = select_ln111_1_reg_394;
    end else begin
        ap_phi_mux_i_0_phi_fu_117_p4 = i_0_reg_113;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_139_p4 = select_ln111_4_reg_404;
    end else begin
        ap_phi_mux_j_0_phi_fu_139_p4 = j_0_reg_135;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_385 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_0_phi_fu_162_p4 = k_reg_424;
    end else begin
        ap_phi_mux_k_0_phi_fu_162_p4 = k_0_reg_158;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_1_fu_371_p2 == 1'd1))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln104_fu_169_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln104_fu_169_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = sext_ln111_2_fu_302_p1;

assign add_ln104_fu_175_p2 = (indvar_flatten14_reg_102 + 5'd1);

assign add_ln105_fu_342_p2 = (indvar_flatten_reg_124 + 4'd1);

assign add_ln111_1_fu_325_p2 = (sub_ln111_1_fu_319_p2 + zext_ln111_2_fu_277_p1);

assign add_ln111_fu_296_p2 = (sub_ln111_fu_225_p2 + zext_ln111_3_fu_292_p1);

assign add_ln113_fu_281_p2 = (sub_ln111_fu_225_p2 + zext_ln111_2_fu_277_p1);

assign and_ln111_fu_243_p2 = (xor_ln111_fu_231_p2 & icmp_ln109_fu_237_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_address0 = sext_ln111_3_fu_331_p1;

assign grp_fu_376_p2 = ((or_ln111_reg_399[0:0] === 1'b1) ? 16'd0 : temp_0_reg_146);

assign i_fu_181_p2 = (ap_phi_mux_i_0_phi_fu_117_p4 + 2'd1);

assign icmp_ln104_fu_169_p2 = ((indvar_flatten14_reg_102 == 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_187_p2 = ((indvar_flatten_reg_124 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln109_1_fu_371_p2 = ((k_reg_424 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_237_p2 = ((ap_phi_mux_k_0_phi_fu_162_p4 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_249_p2 = (select_ln111_fu_193_p3 + 2'd1);

assign k_fu_336_p2 = (select_ln111_3_fu_261_p3 + 2'd1);

assign or_ln111_fu_255_p2 = (icmp_ln105_fu_187_p2 | and_ln111_fu_243_p2);

assign res_address0 = res_addr_reg_409;

assign res_d0 = grp_fu_376_p3;

assign select_ln105_fu_348_p3 = ((icmp_ln105_fu_187_p2[0:0] === 1'b1) ? 4'd1 : add_ln105_fu_342_p2);

assign select_ln111_1_fu_201_p3 = ((icmp_ln105_fu_187_p2[0:0] === 1'b1) ? i_fu_181_p2 : ap_phi_mux_i_0_phi_fu_117_p4);

assign select_ln111_3_fu_261_p3 = ((or_ln111_fu_255_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_k_0_phi_fu_162_p4);

assign select_ln111_4_fu_269_p3 = ((and_ln111_fu_243_p2[0:0] === 1'b1) ? j_fu_249_p2 : select_ln111_fu_193_p3);

assign select_ln111_fu_193_p3 = ((icmp_ln105_fu_187_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_0_phi_fu_139_p4);

assign sext_ln111_2_fu_302_p1 = $signed(add_ln111_fu_296_p2);

assign sext_ln111_3_fu_331_p1 = $signed(add_ln111_1_fu_325_p2);

assign sext_ln113_fu_287_p1 = $signed(add_ln113_fu_281_p2);

assign sub_ln111_1_fu_319_p2 = (zext_ln111_4_fu_315_p1 - zext_ln111_3_fu_292_p1);

assign sub_ln111_fu_225_p2 = (zext_ln111_1_fu_221_p1 - zext_ln111_fu_209_p1);

assign tmp_1_fu_307_p3 = {{select_ln111_3_fu_261_p3}, {2'd0}};

assign tmp_fu_213_p3 = {{select_ln111_1_fu_201_p3}, {2'd0}};

assign xor_ln111_fu_231_p2 = (icmp_ln105_fu_187_p2 ^ 1'd1);

assign zext_ln111_1_fu_221_p1 = tmp_fu_213_p3;

assign zext_ln111_2_fu_277_p1 = select_ln111_4_fu_269_p3;

assign zext_ln111_3_fu_292_p1 = select_ln111_3_fu_261_p3;

assign zext_ln111_4_fu_315_p1 = tmp_1_fu_307_p3;

assign zext_ln111_fu_209_p1 = select_ln111_1_fu_201_p3;

endmodule //matrixmul
