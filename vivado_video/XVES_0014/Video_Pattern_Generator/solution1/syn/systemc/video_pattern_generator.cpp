// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "video_pattern_generator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic video_pattern_generator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic video_pattern_generator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> video_pattern_generator::ap_ST_fsm_state1 = "1";
const sc_lv<3> video_pattern_generator::ap_ST_fsm_state2 = "10";
const sc_lv<3> video_pattern_generator::ap_ST_fsm_state3 = "100";
const sc_lv<32> video_pattern_generator::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> video_pattern_generator::ap_const_lv32_2 = "10";
const sc_lv<1> video_pattern_generator::ap_const_lv1_0 = "0";
const sc_lv<32> video_pattern_generator::ap_const_lv32_1 = "1";
const sc_lv<10> video_pattern_generator::ap_const_lv10_0 = "0000000000";
const sc_lv<1> video_pattern_generator::ap_const_lv1_1 = "1";
const sc_lv<3> video_pattern_generator::ap_const_lv3_0 = "000";
const sc_lv<10> video_pattern_generator::ap_const_lv10_258 = "1001011000";
const sc_lv<10> video_pattern_generator::ap_const_lv10_1 = "1";
const sc_lv<10> video_pattern_generator::ap_const_lv10_320 = "1100100000";
const sc_lv<10> video_pattern_generator::ap_const_lv10_31F = "1100011111";
const bool video_pattern_generator::ap_const_boolean_1 = true;

video_pattern_generator::video_pattern_generator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_106_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_106_p2 );

    SC_METHOD(thread_i_fu_112_p2);
    sensitive << ( i_0_reg_83 );

    SC_METHOD(thread_icmp_ln13_fu_106_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_83 );

    SC_METHOD(thread_icmp_ln15_fu_118_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );
    sensitive << ( j_0_reg_95 );

    SC_METHOD(thread_io_acc_block_signal_op36);
    sensitive << ( m_axis_video_V_data_V_full_n );
    sensitive << ( m_axis_video_V_keep_V_full_n );
    sensitive << ( m_axis_video_V_strb_V_full_n );
    sensitive << ( m_axis_video_V_user_V_full_n );
    sensitive << ( m_axis_video_V_last_V_full_n );
    sensitive << ( m_axis_video_V_id_V_full_n );
    sensitive << ( m_axis_video_V_dest_V_full_n );

    SC_METHOD(thread_j_fu_124_p2);
    sensitive << ( j_0_reg_95 );

    SC_METHOD(thread_m_axis_video_V_data_V_blk_n);
    sensitive << ( m_axis_video_V_data_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );

    SC_METHOD(thread_m_axis_video_V_data_V_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );
    sensitive << ( j_0_reg_95 );

    SC_METHOD(thread_m_axis_video_V_data_V_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_dest_V_blk_n);
    sensitive << ( m_axis_video_V_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );

    SC_METHOD(thread_m_axis_video_V_dest_V_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_dest_V_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_id_V_blk_n);
    sensitive << ( m_axis_video_V_id_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );

    SC_METHOD(thread_m_axis_video_V_id_V_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_id_V_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_keep_V_blk_n);
    sensitive << ( m_axis_video_V_keep_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );

    SC_METHOD(thread_m_axis_video_V_keep_V_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_keep_V_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_last_V_blk_n);
    sensitive << ( m_axis_video_V_last_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );

    SC_METHOD(thread_m_axis_video_V_last_V_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );
    sensitive << ( j_0_reg_95 );

    SC_METHOD(thread_m_axis_video_V_last_V_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_strb_V_blk_n);
    sensitive << ( m_axis_video_V_strb_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );

    SC_METHOD(thread_m_axis_video_V_strb_V_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_strb_V_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_m_axis_video_V_user_V_blk_n);
    sensitive << ( m_axis_video_V_user_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );

    SC_METHOD(thread_m_axis_video_V_user_V_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );
    sensitive << ( or_ln18_fu_130_p2 );

    SC_METHOD(thread_m_axis_video_V_user_V_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( io_acc_block_signal_op36 );

    SC_METHOD(thread_or_ln18_fu_130_p2);
    sensitive << ( i_0_reg_83 );
    sensitive << ( j_0_reg_95 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_fu_118_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( io_acc_block_signal_op36 );
    sensitive << ( icmp_ln13_fu_106_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "video_pattern_generator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axis_video_V_data_V_din, "(port)m_axis_video_V_data_V_din");
    sc_trace(mVcdFile, m_axis_video_V_data_V_full_n, "(port)m_axis_video_V_data_V_full_n");
    sc_trace(mVcdFile, m_axis_video_V_data_V_write, "(port)m_axis_video_V_data_V_write");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_din, "(port)m_axis_video_V_keep_V_din");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_full_n, "(port)m_axis_video_V_keep_V_full_n");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_write, "(port)m_axis_video_V_keep_V_write");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_din, "(port)m_axis_video_V_strb_V_din");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_full_n, "(port)m_axis_video_V_strb_V_full_n");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_write, "(port)m_axis_video_V_strb_V_write");
    sc_trace(mVcdFile, m_axis_video_V_user_V_din, "(port)m_axis_video_V_user_V_din");
    sc_trace(mVcdFile, m_axis_video_V_user_V_full_n, "(port)m_axis_video_V_user_V_full_n");
    sc_trace(mVcdFile, m_axis_video_V_user_V_write, "(port)m_axis_video_V_user_V_write");
    sc_trace(mVcdFile, m_axis_video_V_last_V_din, "(port)m_axis_video_V_last_V_din");
    sc_trace(mVcdFile, m_axis_video_V_last_V_full_n, "(port)m_axis_video_V_last_V_full_n");
    sc_trace(mVcdFile, m_axis_video_V_last_V_write, "(port)m_axis_video_V_last_V_write");
    sc_trace(mVcdFile, m_axis_video_V_id_V_din, "(port)m_axis_video_V_id_V_din");
    sc_trace(mVcdFile, m_axis_video_V_id_V_full_n, "(port)m_axis_video_V_id_V_full_n");
    sc_trace(mVcdFile, m_axis_video_V_id_V_write, "(port)m_axis_video_V_id_V_write");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_din, "(port)m_axis_video_V_dest_V_din");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_full_n, "(port)m_axis_video_V_dest_V_full_n");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_write, "(port)m_axis_video_V_dest_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, m_axis_video_V_data_V_blk_n, "m_axis_video_V_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln15_fu_118_p2, "icmp_ln15_fu_118_p2");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_blk_n, "m_axis_video_V_keep_V_blk_n");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_blk_n, "m_axis_video_V_strb_V_blk_n");
    sc_trace(mVcdFile, m_axis_video_V_user_V_blk_n, "m_axis_video_V_user_V_blk_n");
    sc_trace(mVcdFile, m_axis_video_V_last_V_blk_n, "m_axis_video_V_last_V_blk_n");
    sc_trace(mVcdFile, m_axis_video_V_id_V_blk_n, "m_axis_video_V_id_V_blk_n");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_blk_n, "m_axis_video_V_dest_V_blk_n");
    sc_trace(mVcdFile, i_fu_112_p2, "i_fu_112_p2");
    sc_trace(mVcdFile, i_reg_158, "i_reg_158");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, j_fu_124_p2, "j_fu_124_p2");
    sc_trace(mVcdFile, io_acc_block_signal_op36, "io_acc_block_signal_op36");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, i_0_reg_83, "i_0_reg_83");
    sc_trace(mVcdFile, j_0_reg_95, "j_0_reg_95");
    sc_trace(mVcdFile, icmp_ln13_fu_106_p2, "icmp_ln13_fu_106_p2");
    sc_trace(mVcdFile, or_ln18_fu_130_p2, "or_ln18_fu_130_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("video_pattern_generator.hdltvin.dat");
    mHdltvoutHandle.open("video_pattern_generator.hdltvout.dat");
}

video_pattern_generator::~video_pattern_generator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void video_pattern_generator::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_1))) {
        i_0_reg_83 = i_reg_158.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_83 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln13_fu_106_p2.read()))) {
        j_0_reg_95 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
                !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        j_0_reg_95 = j_fu_124_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_158 = i_fu_112_p2.read();
    }
}

void video_pattern_generator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void video_pattern_generator::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void video_pattern_generator::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void video_pattern_generator::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read()));
}

void video_pattern_generator::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln13_fu_106_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln13_fu_106_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_i_fu_112_p2() {
    i_fu_112_p2 = (!i_0_reg_83.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_0_reg_83.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void video_pattern_generator::thread_icmp_ln13_fu_106_p2() {
    icmp_ln13_fu_106_p2 = (!i_0_reg_83.read().is_01() || !ap_const_lv10_258.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_83.read() == ap_const_lv10_258);
}

void video_pattern_generator::thread_icmp_ln15_fu_118_p2() {
    icmp_ln15_fu_118_p2 = (!j_0_reg_95.read().is_01() || !ap_const_lv10_320.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_95.read() == ap_const_lv10_320);
}

void video_pattern_generator::thread_io_acc_block_signal_op36() {
    io_acc_block_signal_op36 = (m_axis_video_V_data_V_full_n.read() & m_axis_video_V_keep_V_full_n.read() & m_axis_video_V_strb_V_full_n.read() & m_axis_video_V_user_V_full_n.read() & m_axis_video_V_last_V_full_n.read() & m_axis_video_V_id_V_full_n.read() & m_axis_video_V_dest_V_full_n.read());
}

void video_pattern_generator::thread_j_fu_124_p2() {
    j_fu_124_p2 = (!j_0_reg_95.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_0_reg_95.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void video_pattern_generator::thread_m_axis_video_V_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0))) {
        m_axis_video_V_data_V_blk_n = m_axis_video_V_data_V_full_n.read();
    } else {
        m_axis_video_V_data_V_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_V_data_V_din() {
    m_axis_video_V_data_V_din = esl_zext<24,10>(j_0_reg_95.read());
}

void video_pattern_generator::thread_m_axis_video_V_data_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        m_axis_video_V_data_V_write = ap_const_logic_1;
    } else {
        m_axis_video_V_data_V_write = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0))) {
        m_axis_video_V_dest_V_blk_n = m_axis_video_V_dest_V_full_n.read();
    } else {
        m_axis_video_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_din() {
    m_axis_video_V_dest_V_din = ap_const_lv1_0;
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        m_axis_video_V_dest_V_write = ap_const_logic_1;
    } else {
        m_axis_video_V_dest_V_write = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_id_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0))) {
        m_axis_video_V_id_V_blk_n = m_axis_video_V_id_V_full_n.read();
    } else {
        m_axis_video_V_id_V_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_V_id_V_din() {
    m_axis_video_V_id_V_din = ap_const_lv1_0;
}

void video_pattern_generator::thread_m_axis_video_V_id_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        m_axis_video_V_id_V_write = ap_const_logic_1;
    } else {
        m_axis_video_V_id_V_write = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0))) {
        m_axis_video_V_keep_V_blk_n = m_axis_video_V_keep_V_full_n.read();
    } else {
        m_axis_video_V_keep_V_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_din() {
    m_axis_video_V_keep_V_din = ap_const_lv3_0;
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        m_axis_video_V_keep_V_write = ap_const_logic_1;
    } else {
        m_axis_video_V_keep_V_write = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0))) {
        m_axis_video_V_last_V_blk_n = m_axis_video_V_last_V_full_n.read();
    } else {
        m_axis_video_V_last_V_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_V_last_V_din() {
    m_axis_video_V_last_V_din = (!j_0_reg_95.read().is_01() || !ap_const_lv10_31F.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_95.read() == ap_const_lv10_31F);
}

void video_pattern_generator::thread_m_axis_video_V_last_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        m_axis_video_V_last_V_write = ap_const_logic_1;
    } else {
        m_axis_video_V_last_V_write = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0))) {
        m_axis_video_V_strb_V_blk_n = m_axis_video_V_strb_V_full_n.read();
    } else {
        m_axis_video_V_strb_V_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_din() {
    m_axis_video_V_strb_V_din = ap_const_lv3_0;
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        m_axis_video_V_strb_V_write = ap_const_logic_1;
    } else {
        m_axis_video_V_strb_V_write = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_user_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0))) {
        m_axis_video_V_user_V_blk_n = m_axis_video_V_user_V_full_n.read();
    } else {
        m_axis_video_V_user_V_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_V_user_V_din() {
    m_axis_video_V_user_V_din = (!or_ln18_fu_130_p2.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln18_fu_130_p2.read() == ap_const_lv10_0);
}

void video_pattern_generator::thread_m_axis_video_V_user_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
        m_axis_video_V_user_V_write = ap_const_logic_1;
    } else {
        m_axis_video_V_user_V_write = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_or_ln18_fu_130_p2() {
    or_ln18_fu_130_p2 = (j_0_reg_95.read() | i_0_reg_83.read());
}

void video_pattern_generator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln13_fu_106_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())) && esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln15_fu_118_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op36.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void video_pattern_generator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_data_V_din\" :  \"" << m_axis_video_V_data_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_V_data_V_full_n\" :  \"" << m_axis_video_V_data_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_data_V_write\" :  \"" << m_axis_video_V_data_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_keep_V_din\" :  \"" << m_axis_video_V_keep_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_V_keep_V_full_n\" :  \"" << m_axis_video_V_keep_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_keep_V_write\" :  \"" << m_axis_video_V_keep_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_strb_V_din\" :  \"" << m_axis_video_V_strb_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_V_strb_V_full_n\" :  \"" << m_axis_video_V_strb_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_strb_V_write\" :  \"" << m_axis_video_V_strb_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_user_V_din\" :  \"" << m_axis_video_V_user_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_V_user_V_full_n\" :  \"" << m_axis_video_V_user_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_user_V_write\" :  \"" << m_axis_video_V_user_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_last_V_din\" :  \"" << m_axis_video_V_last_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_V_last_V_full_n\" :  \"" << m_axis_video_V_last_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_last_V_write\" :  \"" << m_axis_video_V_last_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_id_V_din\" :  \"" << m_axis_video_V_id_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_V_id_V_full_n\" :  \"" << m_axis_video_V_id_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_id_V_write\" :  \"" << m_axis_video_V_id_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_dest_V_din\" :  \"" << m_axis_video_V_dest_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_V_dest_V_full_n\" :  \"" << m_axis_video_V_dest_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_V_dest_V_write\" :  \"" << m_axis_video_V_dest_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

