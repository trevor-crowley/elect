// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "video_pattern_generator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic video_pattern_generator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic video_pattern_generator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> video_pattern_generator::ap_ST_fsm_state1 = "1";
const sc_lv<3> video_pattern_generator::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> video_pattern_generator::ap_ST_fsm_state5 = "100";
const sc_lv<32> video_pattern_generator::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool video_pattern_generator::ap_const_boolean_1 = true;
const sc_lv<1> video_pattern_generator::ap_const_lv1_0 = "0";
const sc_lv<1> video_pattern_generator::ap_const_lv1_1 = "1";
const sc_lv<2> video_pattern_generator::ap_const_lv2_0 = "00";
const sc_lv<2> video_pattern_generator::ap_const_lv2_2 = "10";
const sc_lv<2> video_pattern_generator::ap_const_lv2_3 = "11";
const sc_lv<2> video_pattern_generator::ap_const_lv2_1 = "1";
const sc_lv<32> video_pattern_generator::ap_const_lv32_1 = "1";
const bool video_pattern_generator::ap_const_boolean_0 = false;
const sc_lv<19> video_pattern_generator::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<10> video_pattern_generator::ap_const_lv10_0 = "0000000000";
const sc_lv<24> video_pattern_generator::ap_const_lv24_FF0000 = "111111110000000000000000";
const sc_lv<3> video_pattern_generator::ap_const_lv3_0 = "000";
const sc_lv<19> video_pattern_generator::ap_const_lv19_75300 = "1110101001100000000";
const sc_lv<19> video_pattern_generator::ap_const_lv19_1 = "1";
const sc_lv<10> video_pattern_generator::ap_const_lv10_320 = "1100100000";
const sc_lv<10> video_pattern_generator::ap_const_lv10_1 = "1";
const sc_lv<10> video_pattern_generator::ap_const_lv10_31F = "1100011111";
const sc_lv<32> video_pattern_generator::ap_const_lv32_2 = "10";

video_pattern_generator::video_pattern_generator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln14_1_fu_161_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_117_p4 );

    SC_METHOD(thread_add_ln14_fu_141_p2);
    sensitive << ( indvar_flatten_reg_102 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( icmp_ln14_reg_199 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( icmp_ln14_reg_199_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln14_fu_135_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_117_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( i_0_reg_113 );
    sensitive << ( select_ln14_reg_208 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_icmp_ln14_fu_135_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_102 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln16_fu_147_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_0_reg_124 );
    sensitive << ( icmp_ln14_fu_135_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_j_fu_193_p2);
    sensitive << ( select_ln16_fu_153_p3 );

    SC_METHOD(thread_m_axis_video_TDATA);
    sensitive << ( m_axis_video_V_data_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln14_reg_199_pp0_iter1_reg );

    SC_METHOD(thread_m_axis_video_TDEST);
    sensitive << ( m_axis_video_V_dest_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TID);
    sensitive << ( m_axis_video_V_id_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TKEEP);
    sensitive << ( m_axis_video_V_keep_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TLAST);
    sensitive << ( m_axis_video_V_last_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TSTRB);
    sensitive << ( m_axis_video_V_strb_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TUSER);
    sensitive << ( m_axis_video_V_user_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_ack_in);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_data_V_1_data_out);
    sensitive << ( m_axis_video_V_data_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_data_V_1_sel);
    sensitive << ( m_axis_video_V_data_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_data_V_1_vld_out);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_data_out);
    sensitive << ( m_axis_video_V_dest_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_sel);
    sensitive << ( m_axis_video_V_dest_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_vld_out);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_id_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_id_V_1_data_out);
    sensitive << ( m_axis_video_V_id_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_id_V_1_sel);
    sensitive << ( m_axis_video_V_id_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_id_V_1_vld_out);
    sensitive << ( m_axis_video_V_id_V_1_state );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_data_out);
    sensitive << ( m_axis_video_V_keep_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_sel);
    sensitive << ( m_axis_video_V_keep_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_vld_out);
    sensitive << ( m_axis_video_V_keep_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_ack_in);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_last_V_1_data_out);
    sensitive << ( m_axis_video_V_last_V_1_payload_A );
    sensitive << ( m_axis_video_V_last_V_1_payload_B );
    sensitive << ( m_axis_video_V_last_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_last_V_1_load_A);
    sensitive << ( m_axis_video_V_last_V_1_sel_wr );
    sensitive << ( m_axis_video_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_last_V_1_load_B);
    sensitive << ( m_axis_video_V_last_V_1_sel_wr );
    sensitive << ( m_axis_video_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_last_V_1_sel);
    sensitive << ( m_axis_video_V_last_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_last_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_last_V_1_vld_out);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_data_out);
    sensitive << ( m_axis_video_V_strb_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_sel);
    sensitive << ( m_axis_video_V_strb_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_vld_out);
    sensitive << ( m_axis_video_V_strb_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_ack_in);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_user_V_1_data_out);
    sensitive << ( m_axis_video_V_user_V_1_payload_A );
    sensitive << ( m_axis_video_V_user_V_1_payload_B );
    sensitive << ( m_axis_video_V_user_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_user_V_1_load_A);
    sensitive << ( m_axis_video_V_user_V_1_sel_wr );
    sensitive << ( m_axis_video_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_user_V_1_load_B);
    sensitive << ( m_axis_video_V_user_V_1_sel_wr );
    sensitive << ( m_axis_video_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_user_V_1_sel);
    sensitive << ( m_axis_video_V_user_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_user_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln14_reg_199 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axis_video_V_user_V_1_vld_out);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_or_ln21_fu_175_p2);
    sensitive << ( select_ln14_fu_167_p3 );
    sensitive << ( select_ln16_fu_153_p3 );

    SC_METHOD(thread_select_ln14_fu_167_p3);
    sensitive << ( ap_phi_mux_i_0_phi_fu_117_p4 );
    sensitive << ( icmp_ln16_fu_147_p2 );
    sensitive << ( add_ln14_1_fu_161_p2 );

    SC_METHOD(thread_select_ln16_fu_153_p3);
    sensitive << ( j_0_reg_124 );
    sensitive << ( icmp_ln16_fu_147_p2 );

    SC_METHOD(thread_tmp_last_V_fu_187_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln14_fu_135_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( select_ln16_fu_153_p3 );

    SC_METHOD(thread_tmp_user_V_fu_181_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln14_fu_135_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( or_ln21_fu_175_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln14_fu_135_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    m_axis_video_V_data_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_data_V_1_state = "00";
    m_axis_video_V_keep_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_keep_V_1_state = "00";
    m_axis_video_V_strb_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_strb_V_1_state = "00";
    m_axis_video_V_user_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_user_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_user_V_1_state = "00";
    m_axis_video_V_last_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_last_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_last_V_1_state = "00";
    m_axis_video_V_id_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_id_V_1_state = "00";
    m_axis_video_V_dest_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "video_pattern_generator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_data_out, "m_axis_video_V_data_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_vld_in, "m_axis_video_V_data_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_vld_out, "m_axis_video_V_data_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_ack_in, "m_axis_video_V_data_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_ack_out, "m_axis_video_V_data_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel_rd, "m_axis_video_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel, "m_axis_video_V_data_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_state, "m_axis_video_V_data_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_data_out, "m_axis_video_V_keep_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_vld_in, "m_axis_video_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_vld_out, "m_axis_video_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_ack_out, "m_axis_video_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_sel_rd, "m_axis_video_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_sel, "m_axis_video_V_keep_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_state, "m_axis_video_V_keep_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_data_out, "m_axis_video_V_strb_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_vld_in, "m_axis_video_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_vld_out, "m_axis_video_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_ack_out, "m_axis_video_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_sel_rd, "m_axis_video_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_sel, "m_axis_video_V_strb_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_state, "m_axis_video_V_strb_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_data_out, "m_axis_video_V_user_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_vld_in, "m_axis_video_V_user_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_vld_out, "m_axis_video_V_user_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_ack_in, "m_axis_video_V_user_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_ack_out, "m_axis_video_V_user_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_payload_A, "m_axis_video_V_user_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_payload_B, "m_axis_video_V_user_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel_rd, "m_axis_video_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel_wr, "m_axis_video_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel, "m_axis_video_V_user_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_load_A, "m_axis_video_V_user_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_load_B, "m_axis_video_V_user_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_state, "m_axis_video_V_user_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_state_cmp_full, "m_axis_video_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_data_out, "m_axis_video_V_last_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_vld_in, "m_axis_video_V_last_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_vld_out, "m_axis_video_V_last_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_ack_in, "m_axis_video_V_last_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_ack_out, "m_axis_video_V_last_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_payload_A, "m_axis_video_V_last_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_payload_B, "m_axis_video_V_last_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel_rd, "m_axis_video_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel_wr, "m_axis_video_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel, "m_axis_video_V_last_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_load_A, "m_axis_video_V_last_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_load_B, "m_axis_video_V_last_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_state, "m_axis_video_V_last_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_state_cmp_full, "m_axis_video_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_data_out, "m_axis_video_V_id_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_vld_in, "m_axis_video_V_id_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_vld_out, "m_axis_video_V_id_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_ack_out, "m_axis_video_V_id_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_sel_rd, "m_axis_video_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_sel, "m_axis_video_V_id_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_state, "m_axis_video_V_id_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_data_out, "m_axis_video_V_dest_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_vld_in, "m_axis_video_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_vld_out, "m_axis_video_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_ack_out, "m_axis_video_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_sel_rd, "m_axis_video_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_sel, "m_axis_video_V_dest_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_state, "m_axis_video_V_dest_V_1_state");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln14_reg_199, "icmp_ln14_reg_199");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln14_reg_199_pp0_iter1_reg, "icmp_ln14_reg_199_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_102, "indvar_flatten_reg_102");
    sc_trace(mVcdFile, i_0_reg_113, "i_0_reg_113");
    sc_trace(mVcdFile, j_0_reg_124, "j_0_reg_124");
    sc_trace(mVcdFile, icmp_ln14_fu_135_p2, "icmp_ln14_fu_135_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln14_fu_141_p2, "add_ln14_fu_141_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, select_ln14_fu_167_p3, "select_ln14_fu_167_p3");
    sc_trace(mVcdFile, select_ln14_reg_208, "select_ln14_reg_208");
    sc_trace(mVcdFile, tmp_user_V_fu_181_p2, "tmp_user_V_fu_181_p2");
    sc_trace(mVcdFile, tmp_user_V_reg_213, "tmp_user_V_reg_213");
    sc_trace(mVcdFile, tmp_last_V_fu_187_p2, "tmp_last_V_fu_187_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_218, "tmp_last_V_reg_218");
    sc_trace(mVcdFile, j_fu_193_p2, "j_fu_193_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_117_p4, "ap_phi_mux_i_0_phi_fu_117_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, icmp_ln16_fu_147_p2, "icmp_ln16_fu_147_p2");
    sc_trace(mVcdFile, add_ln14_1_fu_161_p2, "add_ln14_1_fu_161_p2");
    sc_trace(mVcdFile, select_ln16_fu_153_p3, "select_ln16_fu_153_p3");
    sc_trace(mVcdFile, or_ln21_fu_175_p2, "or_ln21_fu_175_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("video_pattern_generator.hdltvin.dat");
    mHdltvoutHandle.open("video_pattern_generator.hdltvout.dat");
}

video_pattern_generator::~video_pattern_generator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void video_pattern_generator::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_reg_113 = select_ln14_reg_208.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_113 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_135_p2.read()))) {
        indvar_flatten_reg_102 = add_ln14_fu_141_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_102 = ap_const_lv19_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_135_p2.read()))) {
        j_0_reg_124 = j_fu_193_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_124 = ap_const_lv10_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_out.read()))) {
            m_axis_video_V_data_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()))))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_out.read()))) {
            m_axis_video_V_dest_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_dest_V_1_state.read())))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read())))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()))))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_out.read()))) {
            m_axis_video_V_id_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_id_V_1_state.read())))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read())))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()))))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_out.read()))) {
            m_axis_video_V_keep_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_keep_V_1_state.read())))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read())))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()))))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_out.read()))) {
            m_axis_video_V_last_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_in.read()))) {
            m_axis_video_V_last_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_last_V_1_state.read())))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read())))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()))))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_out.read()))) {
            m_axis_video_V_strb_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_strb_V_1_state.read())))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read())))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()))))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_out.read()))) {
            m_axis_video_V_user_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_in.read()))) {
            m_axis_video_V_user_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_user_V_1_state.read())))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read())))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()))))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln14_reg_199 = icmp_ln14_fu_135_p2.read();
        icmp_ln14_reg_199_pp0_iter1_reg = icmp_ln14_reg_199.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_load_A.read())) {
        m_axis_video_V_last_V_1_payload_A = tmp_last_V_reg_218.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_load_B.read())) {
        m_axis_video_V_last_V_1_payload_B = tmp_last_V_reg_218.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_load_A.read())) {
        m_axis_video_V_user_V_1_payload_A = tmp_user_V_reg_213.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_load_B.read())) {
        m_axis_video_V_user_V_1_payload_B = tmp_user_V_reg_213.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_135_p2.read()))) {
        select_ln14_reg_208 = select_ln14_fu_167_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_135_p2.read()))) {
        tmp_last_V_reg_218 = tmp_last_V_fu_187_p2.read();
        tmp_user_V_reg_213 = tmp_user_V_fu_181_p2.read();
    }
}

void video_pattern_generator::thread_add_ln14_1_fu_161_p2() {
    add_ln14_1_fu_161_p2 = (!ap_phi_mux_i_0_phi_fu_117_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_i_0_phi_fu_117_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void video_pattern_generator::thread_add_ln14_fu_141_p2() {
    add_ln14_fu_141_p2 = (!indvar_flatten_reg_102.read().is_01() || !ap_const_lv19_1.is_01())? sc_lv<19>(): (sc_biguint<19>(indvar_flatten_reg_102.read()) + sc_biguint<19>(ap_const_lv19_1));
}

void video_pattern_generator::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void video_pattern_generator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void video_pattern_generator::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void video_pattern_generator::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void video_pattern_generator::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void video_pattern_generator::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void video_pattern_generator::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void video_pattern_generator::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void video_pattern_generator::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()));
}

void video_pattern_generator::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void video_pattern_generator::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_ack_in.read()));
}

void video_pattern_generator::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void video_pattern_generator::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())));
}

void video_pattern_generator::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_135_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void video_pattern_generator::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_ap_phi_mux_i_0_phi_fu_117_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()))) {
        ap_phi_mux_i_0_phi_fu_117_p4 = select_ln14_reg_208.read();
    } else {
        ap_phi_mux_i_0_phi_fu_117_p4 = i_0_reg_113.read();
    }
}

void video_pattern_generator::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void video_pattern_generator::thread_icmp_ln14_fu_135_p2() {
    icmp_ln14_fu_135_p2 = (!indvar_flatten_reg_102.read().is_01() || !ap_const_lv19_75300.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_102.read() == ap_const_lv19_75300);
}

void video_pattern_generator::thread_icmp_ln16_fu_147_p2() {
    icmp_ln16_fu_147_p2 = (!j_0_reg_124.read().is_01() || !ap_const_lv10_320.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_124.read() == ap_const_lv10_320);
}

void video_pattern_generator::thread_j_fu_193_p2() {
    j_fu_193_p2 = (!select_ln16_fu_153_p3.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(select_ln16_fu_153_p3.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void video_pattern_generator::thread_m_axis_video_TDATA() {
    m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out.read();
}

void video_pattern_generator::thread_m_axis_video_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199_pp0_iter1_reg.read())))) {
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state.read()[1];
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void video_pattern_generator::thread_m_axis_video_TDEST() {
    m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out.read();
}

void video_pattern_generator::thread_m_axis_video_TID() {
    m_axis_video_TID = m_axis_video_V_id_V_1_data_out.read();
}

void video_pattern_generator::thread_m_axis_video_TKEEP() {
    m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out.read();
}

void video_pattern_generator::thread_m_axis_video_TLAST() {
    m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out.read();
}

void video_pattern_generator::thread_m_axis_video_TSTRB() {
    m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out.read();
}

void video_pattern_generator::thread_m_axis_video_TUSER() {
    m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out.read();
}

void video_pattern_generator::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = m_axis_video_V_dest_V_1_state.read()[0];
}

void video_pattern_generator::thread_m_axis_video_V_data_V_1_ack_in() {
    m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state.read()[1];
}

void video_pattern_generator::thread_m_axis_video_V_data_V_1_ack_out() {
    m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_pattern_generator::thread_m_axis_video_V_data_V_1_data_out() {
    m_axis_video_V_data_V_1_data_out = ap_const_lv24_FF0000;
}

void video_pattern_generator::thread_m_axis_video_V_data_V_1_sel() {
    m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd.read();
}

void video_pattern_generator::thread_m_axis_video_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_data_V_1_vld_out() {
    m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state.read()[0];
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_1_ack_out() {
    m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_1_data_out() {
    m_axis_video_V_dest_V_1_data_out = ap_const_lv1_0;
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_1_sel() {
    m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd.read();
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_dest_V_1_vld_out() {
    m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state.read()[0];
}

void video_pattern_generator::thread_m_axis_video_V_id_V_1_ack_out() {
    m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_pattern_generator::thread_m_axis_video_V_id_V_1_data_out() {
    m_axis_video_V_id_V_1_data_out = ap_const_lv1_0;
}

void video_pattern_generator::thread_m_axis_video_V_id_V_1_sel() {
    m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd.read();
}

void video_pattern_generator::thread_m_axis_video_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_id_V_1_vld_out() {
    m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state.read()[0];
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_1_ack_out() {
    m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_1_data_out() {
    m_axis_video_V_keep_V_1_data_out = ap_const_lv3_0;
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_1_sel() {
    m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd.read();
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_keep_V_1_vld_out() {
    m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state.read()[0];
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_ack_in() {
    m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state.read()[1];
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_ack_out() {
    m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_sel.read())) {
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B.read();
    } else {
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A.read();
    }
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_load_A() {
    m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full.read() & ~m_axis_video_V_last_V_1_sel_wr.read());
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_load_B() {
    m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_sel_wr.read() & m_axis_video_V_last_V_1_state_cmp_full.read());
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_sel() {
    m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd.read();
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_state_cmp_full() {
    m_axis_video_V_last_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_last_V_1_vld_out() {
    m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state.read()[0];
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_1_ack_out() {
    m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_1_data_out() {
    m_axis_video_V_strb_V_1_data_out = ap_const_lv3_0;
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_1_sel() {
    m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd.read();
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_strb_V_1_vld_out() {
    m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state.read()[0];
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_ack_in() {
    m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state.read()[1];
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_ack_out() {
    m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_sel.read())) {
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B.read();
    } else {
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A.read();
    }
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_load_A() {
    m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full.read() & ~m_axis_video_V_user_V_1_sel_wr.read());
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_load_B() {
    m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_sel_wr.read() & m_axis_video_V_user_V_1_state_cmp_full.read());
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_sel() {
    m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd.read();
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_state_cmp_full() {
    m_axis_video_V_user_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_reg_199.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        m_axis_video_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void video_pattern_generator::thread_m_axis_video_V_user_V_1_vld_out() {
    m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state.read()[0];
}

void video_pattern_generator::thread_or_ln21_fu_175_p2() {
    or_ln21_fu_175_p2 = (select_ln16_fu_153_p3.read() | select_ln14_fu_167_p3.read());
}

void video_pattern_generator::thread_select_ln14_fu_167_p3() {
    select_ln14_fu_167_p3 = (!icmp_ln16_fu_147_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln16_fu_147_p2.read()[0].to_bool())? add_ln14_1_fu_161_p2.read(): ap_phi_mux_i_0_phi_fu_117_p4.read());
}

void video_pattern_generator::thread_select_ln16_fu_153_p3() {
    select_ln16_fu_153_p3 = (!icmp_ln16_fu_147_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln16_fu_147_p2.read()[0].to_bool())? ap_const_lv10_0: j_0_reg_124.read());
}

void video_pattern_generator::thread_tmp_last_V_fu_187_p2() {
    tmp_last_V_fu_187_p2 = (!select_ln16_fu_153_p3.read().is_01() || !ap_const_lv10_31F.is_01())? sc_lv<1>(): sc_lv<1>(select_ln16_fu_153_p3.read() == ap_const_lv10_31F);
}

void video_pattern_generator::thread_tmp_user_V_fu_181_p2() {
    tmp_user_V_fu_181_p2 = (!or_ln21_fu_175_p2.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln21_fu_175_p2.read() == ap_const_lv10_0);
}

void video_pattern_generator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_135_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_135_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void video_pattern_generator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

