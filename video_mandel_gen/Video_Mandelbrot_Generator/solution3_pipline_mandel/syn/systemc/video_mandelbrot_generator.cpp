// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "video_mandelbrot_generator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic video_mandelbrot_generator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic video_mandelbrot_generator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> video_mandelbrot_generator::ap_ST_fsm_state1 = "1";
const sc_lv<5> video_mandelbrot_generator::ap_ST_fsm_state2 = "10";
const sc_lv<5> video_mandelbrot_generator::ap_ST_fsm_state3 = "100";
const sc_lv<5> video_mandelbrot_generator::ap_ST_fsm_state4 = "1000";
const sc_lv<5> video_mandelbrot_generator::ap_ST_fsm_state5 = "10000";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> video_mandelbrot_generator::ap_const_lv1_0 = "0";
const sc_lv<1> video_mandelbrot_generator::ap_const_lv1_1 = "1";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_0 = "00";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_2 = "10";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_3 = "11";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_1 = "1";
const int video_mandelbrot_generator::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_1 = "1";
const bool video_mandelbrot_generator::ap_const_boolean_0 = false;
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_2 = "10";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_3 = "11";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_4 = "100";
const bool video_mandelbrot_generator::ap_const_boolean_1 = true;

video_mandelbrot_generator::video_mandelbrot_generator(sc_module_name name) : sc_module(name), mVcdFile(0) {
    video_mandelbrot_generator_cmd_s_axi_U = new video_mandelbrot_generator_cmd_s_axi<C_S_AXI_CMD_ADDR_WIDTH,C_S_AXI_CMD_DATA_WIDTH>("video_mandelbrot_generator_cmd_s_axi_U");
    video_mandelbrot_generator_cmd_s_axi_U->AWVALID(s_axi_cmd_AWVALID);
    video_mandelbrot_generator_cmd_s_axi_U->AWREADY(s_axi_cmd_AWREADY);
    video_mandelbrot_generator_cmd_s_axi_U->AWADDR(s_axi_cmd_AWADDR);
    video_mandelbrot_generator_cmd_s_axi_U->WVALID(s_axi_cmd_WVALID);
    video_mandelbrot_generator_cmd_s_axi_U->WREADY(s_axi_cmd_WREADY);
    video_mandelbrot_generator_cmd_s_axi_U->WDATA(s_axi_cmd_WDATA);
    video_mandelbrot_generator_cmd_s_axi_U->WSTRB(s_axi_cmd_WSTRB);
    video_mandelbrot_generator_cmd_s_axi_U->ARVALID(s_axi_cmd_ARVALID);
    video_mandelbrot_generator_cmd_s_axi_U->ARREADY(s_axi_cmd_ARREADY);
    video_mandelbrot_generator_cmd_s_axi_U->ARADDR(s_axi_cmd_ARADDR);
    video_mandelbrot_generator_cmd_s_axi_U->RVALID(s_axi_cmd_RVALID);
    video_mandelbrot_generator_cmd_s_axi_U->RREADY(s_axi_cmd_RREADY);
    video_mandelbrot_generator_cmd_s_axi_U->RDATA(s_axi_cmd_RDATA);
    video_mandelbrot_generator_cmd_s_axi_U->RRESP(s_axi_cmd_RRESP);
    video_mandelbrot_generator_cmd_s_axi_U->BVALID(s_axi_cmd_BVALID);
    video_mandelbrot_generator_cmd_s_axi_U->BREADY(s_axi_cmd_BREADY);
    video_mandelbrot_generator_cmd_s_axi_U->BRESP(s_axi_cmd_BRESP);
    video_mandelbrot_generator_cmd_s_axi_U->ACLK(ap_clk);
    video_mandelbrot_generator_cmd_s_axi_U->ARESET(ap_rst_n_inv);
    video_mandelbrot_generator_cmd_s_axi_U->ACLK_EN(ap_var_for_const0);
    video_mandelbrot_generator_cmd_s_axi_U->ap_start(ap_start);
    video_mandelbrot_generator_cmd_s_axi_U->interrupt(interrupt);
    video_mandelbrot_generator_cmd_s_axi_U->ap_ready(ap_ready);
    video_mandelbrot_generator_cmd_s_axi_U->ap_done(ap_done);
    video_mandelbrot_generator_cmd_s_axi_U->ap_idle(ap_idle);
    video_mandelbrot_generator_cmd_s_axi_U->re_V(re_V);
    video_mandelbrot_generator_cmd_s_axi_U->im_V(im_V);
    video_mandelbrot_generator_cmd_s_axi_U->zoom_factor_V(zoom_factor_V);
    grp_dataflow_parent_loop_1_fu_136 = new dataflow_parent_loop_1("grp_dataflow_parent_loop_1_fu_136");
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_0_V_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_0_V_full_n(img_0_data_stream_0_full_n);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_0_V_write(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_1_V_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_1_V_full_n(img_0_data_stream_1_full_n);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_1_V_write(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_2_V_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_2_V_full_n(img_0_data_stream_2_full_n);
    grp_dataflow_parent_loop_1_fu_136->img_0_data_stream_2_V_write(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write);
    grp_dataflow_parent_loop_1_fu_136->im_V(im_V_read_reg_175);
    grp_dataflow_parent_loop_1_fu_136->re_V(re_V_read_reg_180);
    grp_dataflow_parent_loop_1_fu_136->zoom_factor_V(zoom_factor_V_read_reg_170);
    grp_dataflow_parent_loop_1_fu_136->ap_clk(ap_clk);
    grp_dataflow_parent_loop_1_fu_136->ap_rst(ap_rst_n_inv);
    grp_dataflow_parent_loop_1_fu_136->im_V_ap_vld(ap_var_for_const0);
    grp_dataflow_parent_loop_1_fu_136->re_V_ap_vld(ap_var_for_const0);
    grp_dataflow_parent_loop_1_fu_136->zoom_factor_V_ap_vld(ap_var_for_const0);
    grp_dataflow_parent_loop_1_fu_136->ap_start(grp_dataflow_parent_loop_1_fu_136_ap_start);
    grp_dataflow_parent_loop_1_fu_136->ap_done(grp_dataflow_parent_loop_1_fu_136_ap_done);
    grp_dataflow_parent_loop_1_fu_136->ap_ready(grp_dataflow_parent_loop_1_fu_136_ap_ready);
    grp_dataflow_parent_loop_1_fu_136->ap_idle(grp_dataflow_parent_loop_1_fu_136_ap_idle);
    grp_dataflow_parent_loop_1_fu_136->ap_continue(grp_dataflow_parent_loop_1_fu_136_ap_continue);
    grp_Mat2AXIvideo_fu_149 = new Mat2AXIvideo("grp_Mat2AXIvideo_fu_149");
    grp_Mat2AXIvideo_fu_149->ap_clk(ap_clk);
    grp_Mat2AXIvideo_fu_149->ap_rst(ap_rst_n_inv);
    grp_Mat2AXIvideo_fu_149->ap_start(grp_Mat2AXIvideo_fu_149_ap_start);
    grp_Mat2AXIvideo_fu_149->ap_done(grp_Mat2AXIvideo_fu_149_ap_done);
    grp_Mat2AXIvideo_fu_149->ap_idle(grp_Mat2AXIvideo_fu_149_ap_idle);
    grp_Mat2AXIvideo_fu_149->ap_ready(grp_Mat2AXIvideo_fu_149_ap_ready);
    grp_Mat2AXIvideo_fu_149->img_data_stream_0_V_dout(img_0_data_stream_0_dout);
    grp_Mat2AXIvideo_fu_149->img_data_stream_0_V_empty_n(img_0_data_stream_0_empty_n);
    grp_Mat2AXIvideo_fu_149->img_data_stream_0_V_read(grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read);
    grp_Mat2AXIvideo_fu_149->img_data_stream_1_V_dout(img_0_data_stream_1_dout);
    grp_Mat2AXIvideo_fu_149->img_data_stream_1_V_empty_n(img_0_data_stream_1_empty_n);
    grp_Mat2AXIvideo_fu_149->img_data_stream_1_V_read(grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read);
    grp_Mat2AXIvideo_fu_149->img_data_stream_2_V_dout(img_0_data_stream_2_dout);
    grp_Mat2AXIvideo_fu_149->img_data_stream_2_V_empty_n(img_0_data_stream_2_empty_n);
    grp_Mat2AXIvideo_fu_149->img_data_stream_2_V_read(grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TDATA(grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TVALID(grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TREADY(grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TKEEP(grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TSTRB(grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TUSER(grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TLAST(grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TID(grp_Mat2AXIvideo_fu_149_m_axis_video_TID);
    grp_Mat2AXIvideo_fu_149->m_axis_video_TDEST(grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST);
    img_0_data_stream_0_fifo_U = new fifo_w8_d2_A("img_0_data_stream_0_fifo_U");
    img_0_data_stream_0_fifo_U->clk(ap_clk);
    img_0_data_stream_0_fifo_U->reset(ap_rst_n_inv);
    img_0_data_stream_0_fifo_U->if_read_ce(ap_var_for_const0);
    img_0_data_stream_0_fifo_U->if_write_ce(ap_var_for_const0);
    img_0_data_stream_0_fifo_U->if_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din);
    img_0_data_stream_0_fifo_U->if_full_n(img_0_data_stream_0_full_n);
    img_0_data_stream_0_fifo_U->if_write(img_0_data_stream_0_write);
    img_0_data_stream_0_fifo_U->if_dout(img_0_data_stream_0_dout);
    img_0_data_stream_0_fifo_U->if_empty_n(img_0_data_stream_0_empty_n);
    img_0_data_stream_0_fifo_U->if_read(img_0_data_stream_0_read);
    img_0_data_stream_1_fifo_U = new fifo_w8_d2_A("img_0_data_stream_1_fifo_U");
    img_0_data_stream_1_fifo_U->clk(ap_clk);
    img_0_data_stream_1_fifo_U->reset(ap_rst_n_inv);
    img_0_data_stream_1_fifo_U->if_read_ce(ap_var_for_const0);
    img_0_data_stream_1_fifo_U->if_write_ce(ap_var_for_const0);
    img_0_data_stream_1_fifo_U->if_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din);
    img_0_data_stream_1_fifo_U->if_full_n(img_0_data_stream_1_full_n);
    img_0_data_stream_1_fifo_U->if_write(img_0_data_stream_1_write);
    img_0_data_stream_1_fifo_U->if_dout(img_0_data_stream_1_dout);
    img_0_data_stream_1_fifo_U->if_empty_n(img_0_data_stream_1_empty_n);
    img_0_data_stream_1_fifo_U->if_read(img_0_data_stream_1_read);
    img_0_data_stream_2_fifo_U = new fifo_w8_d2_A("img_0_data_stream_2_fifo_U");
    img_0_data_stream_2_fifo_U->clk(ap_clk);
    img_0_data_stream_2_fifo_U->reset(ap_rst_n_inv);
    img_0_data_stream_2_fifo_U->if_read_ce(ap_var_for_const0);
    img_0_data_stream_2_fifo_U->if_write_ce(ap_var_for_const0);
    img_0_data_stream_2_fifo_U->if_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din);
    img_0_data_stream_2_fifo_U->if_full_n(img_0_data_stream_2_full_n);
    img_0_data_stream_2_fifo_U->if_write(img_0_data_stream_2_write);
    img_0_data_stream_2_fifo_U->if_dout(img_0_data_stream_2_dout);
    img_0_data_stream_2_fifo_U->if_empty_n(img_0_data_stream_2_empty_n);
    img_0_data_stream_2_fifo_U->if_read(img_0_data_stream_2_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_on_subcall_done);
    sensitive << ( ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready );
    sensitive << ( ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_ap_done);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done);
    sensitive << ( grp_dataflow_parent_loop_1_fu_136_ap_done );
    sensitive << ( ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done );

    SC_METHOD(thread_ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready);
    sensitive << ( grp_dataflow_parent_loop_1_fu_136_ap_ready );
    sensitive << ( ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready );

    SC_METHOD(thread_grp_Mat2AXIvideo_fu_149_ap_start);
    sensitive << ( grp_Mat2AXIvideo_fu_149_ap_start_reg );

    SC_METHOD(thread_grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY);
    sensitive << ( m_axis_video_V_data_V_1_ack_in );
    sensitive << ( m_axis_video_V_keep_V_1_ack_in );
    sensitive << ( m_axis_video_V_strb_V_1_ack_in );
    sensitive << ( m_axis_video_V_user_V_1_ack_in );
    sensitive << ( m_axis_video_V_last_V_1_ack_in );
    sensitive << ( m_axis_video_V_id_V_1_ack_in );
    sensitive << ( m_axis_video_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_dataflow_parent_loop_1_fu_136_ap_continue);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_grp_dataflow_parent_loop_1_fu_136_ap_start);
    sensitive << ( grp_dataflow_parent_loop_1_fu_136_ap_start_reg );

    SC_METHOD(thread_img_0_data_stream_0_read);
    sensitive << ( grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_img_0_data_stream_0_write);
    sensitive << ( grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_img_0_data_stream_1_read);
    sensitive << ( grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_img_0_data_stream_1_write);
    sensitive << ( grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_img_0_data_stream_2_read);
    sensitive << ( grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_img_0_data_stream_2_write);
    sensitive << ( grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axis_video_TDATA);
    sensitive << ( m_axis_video_V_data_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TDEST);
    sensitive << ( m_axis_video_V_dest_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TID);
    sensitive << ( m_axis_video_V_id_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TKEEP);
    sensitive << ( m_axis_video_V_keep_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TLAST);
    sensitive << ( m_axis_video_V_last_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TSTRB);
    sensitive << ( m_axis_video_V_strb_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TUSER);
    sensitive << ( m_axis_video_V_user_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_ack_in);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_data_V_1_data_out);
    sensitive << ( m_axis_video_V_data_V_1_payload_A );
    sensitive << ( m_axis_video_V_data_V_1_payload_B );
    sensitive << ( m_axis_video_V_data_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_data_V_1_load_A);
    sensitive << ( m_axis_video_V_data_V_1_sel_wr );
    sensitive << ( m_axis_video_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_data_V_1_load_B);
    sensitive << ( m_axis_video_V_data_V_1_sel_wr );
    sensitive << ( m_axis_video_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_data_V_1_sel);
    sensitive << ( m_axis_video_V_data_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_data_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_data_V_1_vld_in);
    sensitive << ( grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_V_data_V_1_vld_out);
    sensitive << ( m_axis_video_V_data_V_1_state );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_ack_in);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_data_out);
    sensitive << ( m_axis_video_V_dest_V_1_payload_A );
    sensitive << ( m_axis_video_V_dest_V_1_payload_B );
    sensitive << ( m_axis_video_V_dest_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_load_A);
    sensitive << ( m_axis_video_V_dest_V_1_sel_wr );
    sensitive << ( m_axis_video_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_load_B);
    sensitive << ( m_axis_video_V_dest_V_1_sel_wr );
    sensitive << ( m_axis_video_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_sel);
    sensitive << ( m_axis_video_V_dest_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_vld_in);
    sensitive << ( grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_V_dest_V_1_vld_out);
    sensitive << ( m_axis_video_V_dest_V_1_state );

    SC_METHOD(thread_m_axis_video_V_id_V_1_ack_in);
    sensitive << ( m_axis_video_V_id_V_1_state );

    SC_METHOD(thread_m_axis_video_V_id_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_id_V_1_data_out);
    sensitive << ( m_axis_video_V_id_V_1_payload_A );
    sensitive << ( m_axis_video_V_id_V_1_payload_B );
    sensitive << ( m_axis_video_V_id_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_id_V_1_load_A);
    sensitive << ( m_axis_video_V_id_V_1_sel_wr );
    sensitive << ( m_axis_video_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_id_V_1_load_B);
    sensitive << ( m_axis_video_V_id_V_1_sel_wr );
    sensitive << ( m_axis_video_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_id_V_1_sel);
    sensitive << ( m_axis_video_V_id_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_id_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_id_V_1_state );

    SC_METHOD(thread_m_axis_video_V_id_V_1_vld_in);
    sensitive << ( grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_V_id_V_1_vld_out);
    sensitive << ( m_axis_video_V_id_V_1_state );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_ack_in);
    sensitive << ( m_axis_video_V_keep_V_1_state );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_data_out);
    sensitive << ( m_axis_video_V_keep_V_1_payload_A );
    sensitive << ( m_axis_video_V_keep_V_1_payload_B );
    sensitive << ( m_axis_video_V_keep_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_load_A);
    sensitive << ( m_axis_video_V_keep_V_1_sel_wr );
    sensitive << ( m_axis_video_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_load_B);
    sensitive << ( m_axis_video_V_keep_V_1_sel_wr );
    sensitive << ( m_axis_video_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_sel);
    sensitive << ( m_axis_video_V_keep_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_keep_V_1_state );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_vld_in);
    sensitive << ( grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_V_keep_V_1_vld_out);
    sensitive << ( m_axis_video_V_keep_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_ack_in);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_last_V_1_data_out);
    sensitive << ( m_axis_video_V_last_V_1_payload_A );
    sensitive << ( m_axis_video_V_last_V_1_payload_B );
    sensitive << ( m_axis_video_V_last_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_last_V_1_load_A);
    sensitive << ( m_axis_video_V_last_V_1_sel_wr );
    sensitive << ( m_axis_video_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_last_V_1_load_B);
    sensitive << ( m_axis_video_V_last_V_1_sel_wr );
    sensitive << ( m_axis_video_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_last_V_1_sel);
    sensitive << ( m_axis_video_V_last_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_last_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_last_V_1_vld_in);
    sensitive << ( grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_V_last_V_1_vld_out);
    sensitive << ( m_axis_video_V_last_V_1_state );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_ack_in);
    sensitive << ( m_axis_video_V_strb_V_1_state );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_data_out);
    sensitive << ( m_axis_video_V_strb_V_1_payload_A );
    sensitive << ( m_axis_video_V_strb_V_1_payload_B );
    sensitive << ( m_axis_video_V_strb_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_load_A);
    sensitive << ( m_axis_video_V_strb_V_1_sel_wr );
    sensitive << ( m_axis_video_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_load_B);
    sensitive << ( m_axis_video_V_strb_V_1_sel_wr );
    sensitive << ( m_axis_video_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_sel);
    sensitive << ( m_axis_video_V_strb_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_strb_V_1_state );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_vld_in);
    sensitive << ( grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_V_strb_V_1_vld_out);
    sensitive << ( m_axis_video_V_strb_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_ack_in);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_m_axis_video_V_user_V_1_data_out);
    sensitive << ( m_axis_video_V_user_V_1_payload_A );
    sensitive << ( m_axis_video_V_user_V_1_payload_B );
    sensitive << ( m_axis_video_V_user_V_1_sel );

    SC_METHOD(thread_m_axis_video_V_user_V_1_load_A);
    sensitive << ( m_axis_video_V_user_V_1_sel_wr );
    sensitive << ( m_axis_video_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_user_V_1_load_B);
    sensitive << ( m_axis_video_V_user_V_1_sel_wr );
    sensitive << ( m_axis_video_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_m_axis_video_V_user_V_1_sel);
    sensitive << ( m_axis_video_V_user_V_1_sel_rd );

    SC_METHOD(thread_m_axis_video_V_user_V_1_state_cmp_full);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_m_axis_video_V_user_V_1_vld_in);
    sensitive << ( grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_V_user_V_1_vld_out);
    sensitive << ( m_axis_video_V_user_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( m_axis_video_V_data_V_1_state );
    sensitive << ( m_axis_video_V_keep_V_1_state );
    sensitive << ( m_axis_video_V_strb_V_1_state );
    sensitive << ( m_axis_video_V_user_V_1_state );
    sensitive << ( m_axis_video_V_last_V_1_state );
    sensitive << ( m_axis_video_V_id_V_1_state );
    sensitive << ( m_axis_video_V_dest_V_1_state );
    sensitive << ( grp_Mat2AXIvideo_fu_149_ap_done );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    m_axis_video_V_data_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_data_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_data_V_1_state = "00";
    m_axis_video_V_keep_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_keep_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_keep_V_1_state = "00";
    m_axis_video_V_strb_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_strb_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_strb_V_1_state = "00";
    m_axis_video_V_user_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_user_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_user_V_1_state = "00";
    m_axis_video_V_last_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_last_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_last_V_1_state = "00";
    m_axis_video_V_id_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_id_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_id_V_1_state = "00";
    m_axis_video_V_dest_V_1_sel_rd = SC_LOGIC_0;
    m_axis_video_V_dest_V_1_sel_wr = SC_LOGIC_0;
    m_axis_video_V_dest_V_1_state = "00";
    grp_dataflow_parent_loop_1_fu_136_ap_start_reg = SC_LOGIC_0;
    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready = SC_LOGIC_0;
    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done = SC_LOGIC_0;
    grp_Mat2AXIvideo_fu_149_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "video_mandelbrot_generator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
    sc_trace(mVcdFile, s_axi_cmd_AWVALID, "(port)s_axi_cmd_AWVALID");
    sc_trace(mVcdFile, s_axi_cmd_AWREADY, "(port)s_axi_cmd_AWREADY");
    sc_trace(mVcdFile, s_axi_cmd_AWADDR, "(port)s_axi_cmd_AWADDR");
    sc_trace(mVcdFile, s_axi_cmd_WVALID, "(port)s_axi_cmd_WVALID");
    sc_trace(mVcdFile, s_axi_cmd_WREADY, "(port)s_axi_cmd_WREADY");
    sc_trace(mVcdFile, s_axi_cmd_WDATA, "(port)s_axi_cmd_WDATA");
    sc_trace(mVcdFile, s_axi_cmd_WSTRB, "(port)s_axi_cmd_WSTRB");
    sc_trace(mVcdFile, s_axi_cmd_ARVALID, "(port)s_axi_cmd_ARVALID");
    sc_trace(mVcdFile, s_axi_cmd_ARREADY, "(port)s_axi_cmd_ARREADY");
    sc_trace(mVcdFile, s_axi_cmd_ARADDR, "(port)s_axi_cmd_ARADDR");
    sc_trace(mVcdFile, s_axi_cmd_RVALID, "(port)s_axi_cmd_RVALID");
    sc_trace(mVcdFile, s_axi_cmd_RREADY, "(port)s_axi_cmd_RREADY");
    sc_trace(mVcdFile, s_axi_cmd_RDATA, "(port)s_axi_cmd_RDATA");
    sc_trace(mVcdFile, s_axi_cmd_RRESP, "(port)s_axi_cmd_RRESP");
    sc_trace(mVcdFile, s_axi_cmd_BVALID, "(port)s_axi_cmd_BVALID");
    sc_trace(mVcdFile, s_axi_cmd_BREADY, "(port)s_axi_cmd_BREADY");
    sc_trace(mVcdFile, s_axi_cmd_BRESP, "(port)s_axi_cmd_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_data_out, "m_axis_video_V_data_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_vld_in, "m_axis_video_V_data_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_vld_out, "m_axis_video_V_data_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_ack_in, "m_axis_video_V_data_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_ack_out, "m_axis_video_V_data_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_payload_A, "m_axis_video_V_data_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_payload_B, "m_axis_video_V_data_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel_rd, "m_axis_video_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel_wr, "m_axis_video_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_sel, "m_axis_video_V_data_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_load_A, "m_axis_video_V_data_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_load_B, "m_axis_video_V_data_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_state, "m_axis_video_V_data_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_data_V_1_state_cmp_full, "m_axis_video_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_data_out, "m_axis_video_V_keep_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_vld_in, "m_axis_video_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_vld_out, "m_axis_video_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_ack_in, "m_axis_video_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_ack_out, "m_axis_video_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_payload_A, "m_axis_video_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_payload_B, "m_axis_video_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_sel_rd, "m_axis_video_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_sel_wr, "m_axis_video_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_sel, "m_axis_video_V_keep_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_load_A, "m_axis_video_V_keep_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_load_B, "m_axis_video_V_keep_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_state, "m_axis_video_V_keep_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_keep_V_1_state_cmp_full, "m_axis_video_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_data_out, "m_axis_video_V_strb_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_vld_in, "m_axis_video_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_vld_out, "m_axis_video_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_ack_in, "m_axis_video_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_ack_out, "m_axis_video_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_payload_A, "m_axis_video_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_payload_B, "m_axis_video_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_sel_rd, "m_axis_video_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_sel_wr, "m_axis_video_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_sel, "m_axis_video_V_strb_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_load_A, "m_axis_video_V_strb_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_load_B, "m_axis_video_V_strb_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_state, "m_axis_video_V_strb_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_strb_V_1_state_cmp_full, "m_axis_video_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_data_out, "m_axis_video_V_user_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_vld_in, "m_axis_video_V_user_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_vld_out, "m_axis_video_V_user_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_ack_in, "m_axis_video_V_user_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_ack_out, "m_axis_video_V_user_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_payload_A, "m_axis_video_V_user_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_payload_B, "m_axis_video_V_user_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel_rd, "m_axis_video_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel_wr, "m_axis_video_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_sel, "m_axis_video_V_user_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_load_A, "m_axis_video_V_user_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_load_B, "m_axis_video_V_user_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_state, "m_axis_video_V_user_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_user_V_1_state_cmp_full, "m_axis_video_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_data_out, "m_axis_video_V_last_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_vld_in, "m_axis_video_V_last_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_vld_out, "m_axis_video_V_last_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_ack_in, "m_axis_video_V_last_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_ack_out, "m_axis_video_V_last_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_payload_A, "m_axis_video_V_last_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_payload_B, "m_axis_video_V_last_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel_rd, "m_axis_video_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel_wr, "m_axis_video_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_sel, "m_axis_video_V_last_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_load_A, "m_axis_video_V_last_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_load_B, "m_axis_video_V_last_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_state, "m_axis_video_V_last_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_last_V_1_state_cmp_full, "m_axis_video_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_data_out, "m_axis_video_V_id_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_vld_in, "m_axis_video_V_id_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_vld_out, "m_axis_video_V_id_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_ack_in, "m_axis_video_V_id_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_ack_out, "m_axis_video_V_id_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_payload_A, "m_axis_video_V_id_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_payload_B, "m_axis_video_V_id_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_sel_rd, "m_axis_video_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_sel_wr, "m_axis_video_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_sel, "m_axis_video_V_id_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_load_A, "m_axis_video_V_id_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_load_B, "m_axis_video_V_id_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_state, "m_axis_video_V_id_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_id_V_1_state_cmp_full, "m_axis_video_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_data_out, "m_axis_video_V_dest_V_1_data_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_vld_in, "m_axis_video_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_vld_out, "m_axis_video_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_ack_in, "m_axis_video_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_ack_out, "m_axis_video_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_payload_A, "m_axis_video_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_payload_B, "m_axis_video_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_sel_rd, "m_axis_video_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_sel_wr, "m_axis_video_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_sel, "m_axis_video_V_dest_V_1_sel");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_load_A, "m_axis_video_V_dest_V_1_load_A");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_load_B, "m_axis_video_V_dest_V_1_load_B");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_state, "m_axis_video_V_dest_V_1_state");
    sc_trace(mVcdFile, m_axis_video_V_dest_V_1_state_cmp_full, "m_axis_video_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, re_V, "re_V");
    sc_trace(mVcdFile, im_V, "im_V");
    sc_trace(mVcdFile, zoom_factor_V, "zoom_factor_V");
    sc_trace(mVcdFile, zoom_factor_V_read_reg_170, "zoom_factor_V_read_reg_170");
    sc_trace(mVcdFile, im_V_read_reg_175, "im_V_read_reg_175");
    sc_trace(mVcdFile, re_V_read_reg_180, "re_V_read_reg_180");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din, "grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write, "grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din, "grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write, "grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din, "grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write, "grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_ap_start, "grp_dataflow_parent_loop_1_fu_136_ap_start");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_ap_done, "grp_dataflow_parent_loop_1_fu_136_ap_done");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_ap_ready, "grp_dataflow_parent_loop_1_fu_136_ap_ready");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_ap_idle, "grp_dataflow_parent_loop_1_fu_136_ap_idle");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_ap_continue, "grp_dataflow_parent_loop_1_fu_136_ap_continue");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_ap_start, "grp_Mat2AXIvideo_fu_149_ap_start");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_ap_done, "grp_Mat2AXIvideo_fu_149_ap_done");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_ap_idle, "grp_Mat2AXIvideo_fu_149_ap_idle");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_ap_ready, "grp_Mat2AXIvideo_fu_149_ap_ready");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read, "grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read, "grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read, "grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA, "grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID, "grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY, "grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP, "grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB, "grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER, "grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST, "grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TID, "grp_Mat2AXIvideo_fu_149_m_axis_video_TID");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST, "grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST");
    sc_trace(mVcdFile, grp_dataflow_parent_loop_1_fu_136_ap_start_reg, "grp_dataflow_parent_loop_1_fu_136_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready, "ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done, "ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done");
    sc_trace(mVcdFile, ap_block_state2_on_subcall_done, "ap_block_state2_on_subcall_done");
    sc_trace(mVcdFile, ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready, "ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready");
    sc_trace(mVcdFile, ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done, "ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done");
    sc_trace(mVcdFile, img_0_data_stream_0_full_n, "img_0_data_stream_0_full_n");
    sc_trace(mVcdFile, img_0_data_stream_0_write, "img_0_data_stream_0_write");
    sc_trace(mVcdFile, img_0_data_stream_1_full_n, "img_0_data_stream_1_full_n");
    sc_trace(mVcdFile, img_0_data_stream_1_write, "img_0_data_stream_1_write");
    sc_trace(mVcdFile, img_0_data_stream_2_full_n, "img_0_data_stream_2_full_n");
    sc_trace(mVcdFile, img_0_data_stream_2_write, "img_0_data_stream_2_write");
    sc_trace(mVcdFile, grp_Mat2AXIvideo_fu_149_ap_start_reg, "grp_Mat2AXIvideo_fu_149_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, img_0_data_stream_0_dout, "img_0_data_stream_0_dout");
    sc_trace(mVcdFile, img_0_data_stream_0_empty_n, "img_0_data_stream_0_empty_n");
    sc_trace(mVcdFile, img_0_data_stream_0_read, "img_0_data_stream_0_read");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, img_0_data_stream_1_dout, "img_0_data_stream_1_dout");
    sc_trace(mVcdFile, img_0_data_stream_1_empty_n, "img_0_data_stream_1_empty_n");
    sc_trace(mVcdFile, img_0_data_stream_1_read, "img_0_data_stream_1_read");
    sc_trace(mVcdFile, img_0_data_stream_2_dout, "img_0_data_stream_2_dout");
    sc_trace(mVcdFile, img_0_data_stream_2_empty_n, "img_0_data_stream_2_empty_n");
    sc_trace(mVcdFile, img_0_data_stream_2_read, "img_0_data_stream_2_read");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("video_mandelbrot_generator.hdltvin.dat");
    mHdltvoutHandle.open("video_mandelbrot_generator.hdltvout.dat");
}

video_mandelbrot_generator::~video_mandelbrot_generator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete video_mandelbrot_generator_cmd_s_axi_U;
    delete grp_dataflow_parent_loop_1_fu_136;
    delete grp_Mat2AXIvideo_fu_149;
    delete img_0_data_stream_0_fifo_U;
    delete img_0_data_stream_1_fifo_U;
    delete img_0_data_stream_2_fifo_U;
}

void video_mandelbrot_generator::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void video_mandelbrot_generator::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_dataflow_parent_loop_1_fu_136_ap_done.read())) {
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_dataflow_parent_loop_1_fu_136_ap_ready.read())) {
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_Mat2AXIvideo_fu_149_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_Mat2AXIvideo_fu_149_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Mat2AXIvideo_fu_149_ap_ready.read())) {
            grp_Mat2AXIvideo_fu_149_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_dataflow_parent_loop_1_fu_136_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready.read())))) {
            grp_dataflow_parent_loop_1_fu_136_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_dataflow_parent_loop_1_fu_136_ap_ready.read())) {
            grp_dataflow_parent_loop_1_fu_136_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_out.read()))) {
            m_axis_video_V_data_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_in.read()))) {
            m_axis_video_V_data_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_ack_out.read()))))) {
            m_axis_video_V_data_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_out.read()))) {
            m_axis_video_V_dest_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_in.read()))) {
            m_axis_video_V_dest_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_dest_V_1_state.read())))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read())))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_ack_out.read()))))) {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_out.read()))) {
            m_axis_video_V_id_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_in.read()))) {
            m_axis_video_V_id_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_id_V_1_state.read())))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read())))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_ack_out.read()))))) {
            m_axis_video_V_id_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_out.read()))) {
            m_axis_video_V_keep_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_in.read()))) {
            m_axis_video_V_keep_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_keep_V_1_state.read())))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read())))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_ack_out.read()))))) {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_out.read()))) {
            m_axis_video_V_last_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_in.read()))) {
            m_axis_video_V_last_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_last_V_1_state.read())))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read())))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_ack_out.read()))))) {
            m_axis_video_V_last_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_out.read()))) {
            m_axis_video_V_strb_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_in.read()))) {
            m_axis_video_V_strb_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_strb_V_1_state.read())))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read())))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_ack_out.read()))))) {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_out.read()))) {
            m_axis_video_V_user_V_1_sel_rd =  (sc_logic) (~m_axis_video_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_in.read()))) {
            m_axis_video_V_user_V_1_sel_wr =  (sc_logic) (~m_axis_video_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        m_axis_video_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_user_V_1_state.read())))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read())))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_ack_out.read()))))) {
            m_axis_video_V_user_V_1_state = ap_const_lv2_3;
        } else {
            m_axis_video_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        im_V_read_reg_175 = im_V.read();
        re_V_read_reg_180 = re_V.read();
        zoom_factor_V_read_reg_170 = zoom_factor_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_load_A.read())) {
        m_axis_video_V_data_V_1_payload_A = grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_load_B.read())) {
        m_axis_video_V_data_V_1_payload_B = grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_load_A.read())) {
        m_axis_video_V_dest_V_1_payload_A = grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_load_B.read())) {
        m_axis_video_V_dest_V_1_payload_B = grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_load_A.read())) {
        m_axis_video_V_id_V_1_payload_A = grp_Mat2AXIvideo_fu_149_m_axis_video_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_load_B.read())) {
        m_axis_video_V_id_V_1_payload_B = grp_Mat2AXIvideo_fu_149_m_axis_video_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_load_A.read())) {
        m_axis_video_V_keep_V_1_payload_A = grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_load_B.read())) {
        m_axis_video_V_keep_V_1_payload_B = grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_load_A.read())) {
        m_axis_video_V_last_V_1_payload_A = grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_load_B.read())) {
        m_axis_video_V_last_V_1_payload_B = grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_load_A.read())) {
        m_axis_video_V_strb_V_1_payload_A = grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_load_B.read())) {
        m_axis_video_V_strb_V_1_payload_B = grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_load_A.read())) {
        m_axis_video_V_user_V_1_payload_A = grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_load_B.read())) {
        m_axis_video_V_user_V_1_payload_B = grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER.read();
    }
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void video_mandelbrot_generator::thread_ap_block_state2_on_subcall_done() {
    ap_block_state2_on_subcall_done = esl_seteq<1,1,1>(ap_const_logic_0, (ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready.read() & ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done.read()));
}

void video_mandelbrot_generator::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read())));
}

void video_mandelbrot_generator::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void video_mandelbrot_generator::thread_ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done() {
    ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done = (grp_dataflow_parent_loop_1_fu_136_ap_done.read() | ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done.read());
}

void video_mandelbrot_generator::thread_ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready() {
    ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready = (grp_dataflow_parent_loop_1_fu_136_ap_ready.read() | ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready.read());
}

void video_mandelbrot_generator::thread_grp_Mat2AXIvideo_fu_149_ap_start() {
    grp_Mat2AXIvideo_fu_149_ap_start = grp_Mat2AXIvideo_fu_149_ap_start_reg.read();
}

void video_mandelbrot_generator::thread_grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY() {
    grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY = ((m_axis_video_V_data_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()) | (m_axis_video_V_keep_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()) | (m_axis_video_V_strb_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()) | (m_axis_video_V_user_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()) | (m_axis_video_V_last_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()) | (m_axis_video_V_id_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()) | (m_axis_video_V_dest_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()));
}

void video_mandelbrot_generator::thread_grp_dataflow_parent_loop_1_fu_136_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        grp_dataflow_parent_loop_1_fu_136_ap_continue = ap_const_logic_1;
    } else {
        grp_dataflow_parent_loop_1_fu_136_ap_continue = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_grp_dataflow_parent_loop_1_fu_136_ap_start() {
    grp_dataflow_parent_loop_1_fu_136_ap_start = grp_dataflow_parent_loop_1_fu_136_ap_start_reg.read();
}

void video_mandelbrot_generator::thread_img_0_data_stream_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        img_0_data_stream_0_read = grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read.read();
    } else {
        img_0_data_stream_0_read = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_img_0_data_stream_0_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        img_0_data_stream_0_write = grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write.read();
    } else {
        img_0_data_stream_0_write = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_img_0_data_stream_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        img_0_data_stream_1_read = grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read.read();
    } else {
        img_0_data_stream_1_read = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_img_0_data_stream_1_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        img_0_data_stream_1_write = grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write.read();
    } else {
        img_0_data_stream_1_write = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_img_0_data_stream_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        img_0_data_stream_2_read = grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read.read();
    } else {
        img_0_data_stream_2_read = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_img_0_data_stream_2_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        img_0_data_stream_2_write = grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write.read();
    } else {
        img_0_data_stream_2_write = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_m_axis_video_TDATA() {
    m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TDEST() {
    m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TID() {
    m_axis_video_TID = m_axis_video_V_id_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TKEEP() {
    m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TLAST() {
    m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TSTRB() {
    m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TUSER() {
    m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = m_axis_video_V_dest_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_ack_in() {
    m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_ack_out() {
    m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_data_V_1_sel.read())) {
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B.read();
    } else {
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_load_A() {
    m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full.read() & ~m_axis_video_V_data_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_load_B() {
    m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_sel_wr.read() & m_axis_video_V_data_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_sel() {
    m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_state_cmp_full() {
    m_axis_video_V_data_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_vld_in() {
    m_axis_video_V_data_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_data_V_1_vld_out() {
    m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_ack_in() {
    m_axis_video_V_dest_V_1_ack_in = m_axis_video_V_dest_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_ack_out() {
    m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_dest_V_1_sel.read())) {
        m_axis_video_V_dest_V_1_data_out = m_axis_video_V_dest_V_1_payload_B.read();
    } else {
        m_axis_video_V_dest_V_1_data_out = m_axis_video_V_dest_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_load_A() {
    m_axis_video_V_dest_V_1_load_A = (m_axis_video_V_dest_V_1_state_cmp_full.read() & ~m_axis_video_V_dest_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_load_B() {
    m_axis_video_V_dest_V_1_load_B = (m_axis_video_V_dest_V_1_sel_wr.read() & m_axis_video_V_dest_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_sel() {
    m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_state_cmp_full() {
    m_axis_video_V_dest_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_vld_in() {
    m_axis_video_V_dest_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_dest_V_1_vld_out() {
    m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_ack_in() {
    m_axis_video_V_id_V_1_ack_in = m_axis_video_V_id_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_ack_out() {
    m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_id_V_1_sel.read())) {
        m_axis_video_V_id_V_1_data_out = m_axis_video_V_id_V_1_payload_B.read();
    } else {
        m_axis_video_V_id_V_1_data_out = m_axis_video_V_id_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_load_A() {
    m_axis_video_V_id_V_1_load_A = (m_axis_video_V_id_V_1_state_cmp_full.read() & ~m_axis_video_V_id_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_load_B() {
    m_axis_video_V_id_V_1_load_B = (m_axis_video_V_id_V_1_sel_wr.read() & m_axis_video_V_id_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_sel() {
    m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_state_cmp_full() {
    m_axis_video_V_id_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_vld_in() {
    m_axis_video_V_id_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_id_V_1_vld_out() {
    m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_ack_in() {
    m_axis_video_V_keep_V_1_ack_in = m_axis_video_V_keep_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_ack_out() {
    m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_keep_V_1_sel.read())) {
        m_axis_video_V_keep_V_1_data_out = m_axis_video_V_keep_V_1_payload_B.read();
    } else {
        m_axis_video_V_keep_V_1_data_out = m_axis_video_V_keep_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_load_A() {
    m_axis_video_V_keep_V_1_load_A = (m_axis_video_V_keep_V_1_state_cmp_full.read() & ~m_axis_video_V_keep_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_load_B() {
    m_axis_video_V_keep_V_1_load_B = (m_axis_video_V_keep_V_1_sel_wr.read() & m_axis_video_V_keep_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_sel() {
    m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_state_cmp_full() {
    m_axis_video_V_keep_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_vld_in() {
    m_axis_video_V_keep_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_keep_V_1_vld_out() {
    m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_ack_in() {
    m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_ack_out() {
    m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_last_V_1_sel.read())) {
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B.read();
    } else {
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_load_A() {
    m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full.read() & ~m_axis_video_V_last_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_load_B() {
    m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_sel_wr.read() & m_axis_video_V_last_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_sel() {
    m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_state_cmp_full() {
    m_axis_video_V_last_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_vld_in() {
    m_axis_video_V_last_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_last_V_1_vld_out() {
    m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_ack_in() {
    m_axis_video_V_strb_V_1_ack_in = m_axis_video_V_strb_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_ack_out() {
    m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_strb_V_1_sel.read())) {
        m_axis_video_V_strb_V_1_data_out = m_axis_video_V_strb_V_1_payload_B.read();
    } else {
        m_axis_video_V_strb_V_1_data_out = m_axis_video_V_strb_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_load_A() {
    m_axis_video_V_strb_V_1_load_A = (m_axis_video_V_strb_V_1_state_cmp_full.read() & ~m_axis_video_V_strb_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_load_B() {
    m_axis_video_V_strb_V_1_load_B = (m_axis_video_V_strb_V_1_sel_wr.read() & m_axis_video_V_strb_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_sel() {
    m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_state_cmp_full() {
    m_axis_video_V_strb_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_vld_in() {
    m_axis_video_V_strb_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_strb_V_1_vld_out() {
    m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_ack_in() {
    m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_ack_out() {
    m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, m_axis_video_V_user_V_1_sel.read())) {
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B.read();
    } else {
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_load_A() {
    m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full.read() & ~m_axis_video_V_user_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_load_B() {
    m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_sel_wr.read() & m_axis_video_V_user_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_sel() {
    m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_state_cmp_full() {
    m_axis_video_V_user_V_1_state_cmp_full =  (sc_logic) ((!m_axis_video_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(m_axis_video_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_vld_in() {
    m_axis_video_V_user_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID.read();
}

void video_mandelbrot_generator::thread_m_axis_video_V_user_V_1_vld_out() {
    m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_Mat2AXIvideo_fu_149_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, m_axis_video_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(m_axis_video_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, m_axis_video_V_dest_V_1_state.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void video_mandelbrot_generator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_AWVALID\" :  \"" << s_axi_cmd_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_AWREADY\" :  \"" << s_axi_cmd_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_AWADDR\" :  \"" << s_axi_cmd_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_WVALID\" :  \"" << s_axi_cmd_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_WREADY\" :  \"" << s_axi_cmd_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_WDATA\" :  \"" << s_axi_cmd_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_WSTRB\" :  \"" << s_axi_cmd_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_ARVALID\" :  \"" << s_axi_cmd_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_ARREADY\" :  \"" << s_axi_cmd_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_ARADDR\" :  \"" << s_axi_cmd_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_RVALID\" :  \"" << s_axi_cmd_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_RREADY\" :  \"" << s_axi_cmd_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_RDATA\" :  \"" << s_axi_cmd_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_RRESP\" :  \"" << s_axi_cmd_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_BVALID\" :  \"" << s_axi_cmd_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_BREADY\" :  \"" << s_axi_cmd_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_BRESP\" :  \"" << s_axi_cmd_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

