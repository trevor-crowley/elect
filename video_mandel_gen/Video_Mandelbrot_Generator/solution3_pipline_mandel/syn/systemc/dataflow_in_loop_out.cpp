// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dataflow_in_loop_out.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<8> dataflow_in_loop_out::ap_const_lv8_0 = "00000000";
const sc_logic dataflow_in_loop_out::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic dataflow_in_loop_out::ap_const_logic_1 = sc_dt::Log_1;

dataflow_in_loop_out::dataflow_in_loop_out(sc_module_name name) : sc_module(name), mVcdFile(0) {
    inner_proc_U0 = new inner_proc("inner_proc_U0");
    inner_proc_U0->ap_clk(ap_clk);
    inner_proc_U0->ap_rst(ap_rst);
    inner_proc_U0->ap_start(inner_proc_U0_ap_start);
    inner_proc_U0->ap_done(inner_proc_U0_ap_done);
    inner_proc_U0->ap_continue(inner_proc_U0_ap_continue);
    inner_proc_U0->ap_idle(inner_proc_U0_ap_idle);
    inner_proc_U0->ap_ready(inner_proc_U0_ap_ready);
    inner_proc_U0->img_0_data_stream_0_V_din(inner_proc_U0_img_0_data_stream_0_V_din);
    inner_proc_U0->img_0_data_stream_0_V_full_n(img_0_data_stream_0_V_full_n);
    inner_proc_U0->img_0_data_stream_0_V_write(inner_proc_U0_img_0_data_stream_0_V_write);
    inner_proc_U0->img_0_data_stream_1_V_din(inner_proc_U0_img_0_data_stream_1_V_din);
    inner_proc_U0->img_0_data_stream_1_V_full_n(img_0_data_stream_1_V_full_n);
    inner_proc_U0->img_0_data_stream_1_V_write(inner_proc_U0_img_0_data_stream_1_V_write);
    inner_proc_U0->img_0_data_stream_2_V_din(inner_proc_U0_img_0_data_stream_2_V_din);
    inner_proc_U0->img_0_data_stream_2_V_full_n(img_0_data_stream_2_V_full_n);
    inner_proc_U0->img_0_data_stream_2_V_write(inner_proc_U0_img_0_data_stream_2_V_write);
    inner_proc_U0->im_V(im_V);
    inner_proc_U0->v_assign(v_assign);
    inner_proc_U0->re_V(re_V);
    inner_proc_U0->zoom_factor_V(zoom_factor_V);

    SC_METHOD(thread_ap_done);
    sensitive << ( inner_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( inner_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( inner_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( inner_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( inner_proc_U0_ap_ready );

    SC_METHOD(thread_img_0_data_stream_0_V_din);
    sensitive << ( inner_proc_U0_img_0_data_stream_0_V_din );

    SC_METHOD(thread_img_0_data_stream_0_V_write);
    sensitive << ( inner_proc_U0_img_0_data_stream_0_V_write );

    SC_METHOD(thread_img_0_data_stream_1_V_din);
    sensitive << ( inner_proc_U0_img_0_data_stream_1_V_din );

    SC_METHOD(thread_img_0_data_stream_1_V_write);
    sensitive << ( inner_proc_U0_img_0_data_stream_1_V_write );

    SC_METHOD(thread_img_0_data_stream_2_V_din);
    sensitive << ( inner_proc_U0_img_0_data_stream_2_V_din );

    SC_METHOD(thread_img_0_data_stream_2_V_write);
    sensitive << ( inner_proc_U0_img_0_data_stream_2_V_write );

    SC_METHOD(thread_inner_proc_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_inner_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_inner_proc_U0_start_full_n);

    SC_METHOD(thread_inner_proc_U0_start_write);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dataflow_in_loop_out_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, img_0_data_stream_0_V_din, "(port)img_0_data_stream_0_V_din");
    sc_trace(mVcdFile, img_0_data_stream_0_V_full_n, "(port)img_0_data_stream_0_V_full_n");
    sc_trace(mVcdFile, img_0_data_stream_0_V_write, "(port)img_0_data_stream_0_V_write");
    sc_trace(mVcdFile, img_0_data_stream_1_V_din, "(port)img_0_data_stream_1_V_din");
    sc_trace(mVcdFile, img_0_data_stream_1_V_full_n, "(port)img_0_data_stream_1_V_full_n");
    sc_trace(mVcdFile, img_0_data_stream_1_V_write, "(port)img_0_data_stream_1_V_write");
    sc_trace(mVcdFile, img_0_data_stream_2_V_din, "(port)img_0_data_stream_2_V_din");
    sc_trace(mVcdFile, img_0_data_stream_2_V_full_n, "(port)img_0_data_stream_2_V_full_n");
    sc_trace(mVcdFile, img_0_data_stream_2_V_write, "(port)img_0_data_stream_2_V_write");
    sc_trace(mVcdFile, im_V, "(port)im_V");
    sc_trace(mVcdFile, v_assign, "(port)v_assign");
    sc_trace(mVcdFile, re_V, "(port)re_V");
    sc_trace(mVcdFile, zoom_factor_V, "(port)zoom_factor_V");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, im_V_ap_vld, "(port)im_V_ap_vld");
    sc_trace(mVcdFile, v_assign_ap_vld, "(port)v_assign_ap_vld");
    sc_trace(mVcdFile, re_V_ap_vld, "(port)re_V_ap_vld");
    sc_trace(mVcdFile, zoom_factor_V_ap_vld, "(port)zoom_factor_V_ap_vld");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, inner_proc_U0_ap_start, "inner_proc_U0_ap_start");
    sc_trace(mVcdFile, inner_proc_U0_ap_done, "inner_proc_U0_ap_done");
    sc_trace(mVcdFile, inner_proc_U0_ap_continue, "inner_proc_U0_ap_continue");
    sc_trace(mVcdFile, inner_proc_U0_ap_idle, "inner_proc_U0_ap_idle");
    sc_trace(mVcdFile, inner_proc_U0_ap_ready, "inner_proc_U0_ap_ready");
    sc_trace(mVcdFile, inner_proc_U0_img_0_data_stream_0_V_din, "inner_proc_U0_img_0_data_stream_0_V_din");
    sc_trace(mVcdFile, inner_proc_U0_img_0_data_stream_0_V_write, "inner_proc_U0_img_0_data_stream_0_V_write");
    sc_trace(mVcdFile, inner_proc_U0_img_0_data_stream_1_V_din, "inner_proc_U0_img_0_data_stream_1_V_din");
    sc_trace(mVcdFile, inner_proc_U0_img_0_data_stream_1_V_write, "inner_proc_U0_img_0_data_stream_1_V_write");
    sc_trace(mVcdFile, inner_proc_U0_img_0_data_stream_2_V_din, "inner_proc_U0_img_0_data_stream_2_V_din");
    sc_trace(mVcdFile, inner_proc_U0_img_0_data_stream_2_V_write, "inner_proc_U0_img_0_data_stream_2_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, inner_proc_U0_start_full_n, "inner_proc_U0_start_full_n");
    sc_trace(mVcdFile, inner_proc_U0_start_write, "inner_proc_U0_start_write");
#endif

    }
}

dataflow_in_loop_out::~dataflow_in_loop_out() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete inner_proc_U0;
}

void dataflow_in_loop_out::thread_ap_done() {
    ap_done = inner_proc_U0_ap_done.read();
}

void dataflow_in_loop_out::thread_ap_idle() {
    ap_idle = inner_proc_U0_ap_idle.read();
}

void dataflow_in_loop_out::thread_ap_ready() {
    ap_ready = inner_proc_U0_ap_ready.read();
}

void dataflow_in_loop_out::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void dataflow_in_loop_out::thread_ap_sync_done() {
    ap_sync_done = inner_proc_U0_ap_done.read();
}

void dataflow_in_loop_out::thread_ap_sync_ready() {
    ap_sync_ready = inner_proc_U0_ap_ready.read();
}

void dataflow_in_loop_out::thread_img_0_data_stream_0_V_din() {
    img_0_data_stream_0_V_din = inner_proc_U0_img_0_data_stream_0_V_din.read();
}

void dataflow_in_loop_out::thread_img_0_data_stream_0_V_write() {
    img_0_data_stream_0_V_write = inner_proc_U0_img_0_data_stream_0_V_write.read();
}

void dataflow_in_loop_out::thread_img_0_data_stream_1_V_din() {
    img_0_data_stream_1_V_din = inner_proc_U0_img_0_data_stream_1_V_din.read();
}

void dataflow_in_loop_out::thread_img_0_data_stream_1_V_write() {
    img_0_data_stream_1_V_write = inner_proc_U0_img_0_data_stream_1_V_write.read();
}

void dataflow_in_loop_out::thread_img_0_data_stream_2_V_din() {
    img_0_data_stream_2_V_din = inner_proc_U0_img_0_data_stream_2_V_din.read();
}

void dataflow_in_loop_out::thread_img_0_data_stream_2_V_write() {
    img_0_data_stream_2_V_write = inner_proc_U0_img_0_data_stream_2_V_write.read();
}

void dataflow_in_loop_out::thread_inner_proc_U0_ap_continue() {
    inner_proc_U0_ap_continue = ap_continue.read();
}

void dataflow_in_loop_out::thread_inner_proc_U0_ap_start() {
    inner_proc_U0_ap_start = ap_start.read();
}

void dataflow_in_loop_out::thread_inner_proc_U0_start_full_n() {
    inner_proc_U0_start_full_n = ap_const_logic_1;
}

void dataflow_in_loop_out::thread_inner_proc_U0_start_write() {
    inner_proc_U0_start_write = ap_const_logic_0;
}

}

