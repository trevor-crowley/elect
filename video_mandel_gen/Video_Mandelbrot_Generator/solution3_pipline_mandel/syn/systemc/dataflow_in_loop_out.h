// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dataflow_in_loop_out_HH_
#define _dataflow_in_loop_out_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "inner_proc.h"

namespace ap_rtl {

struct dataflow_in_loop_out : public sc_module {
    // Port declarations 24
    sc_in< sc_lv<10> > v_assign;
    sc_out< sc_lv<24> > m_axis_video_TDATA;
    sc_out< sc_lv<3> > m_axis_video_TKEEP;
    sc_out< sc_lv<3> > m_axis_video_TSTRB;
    sc_out< sc_lv<1> > m_axis_video_TUSER;
    sc_out< sc_lv<1> > m_axis_video_TLAST;
    sc_out< sc_lv<1> > m_axis_video_TID;
    sc_out< sc_lv<1> > m_axis_video_TDEST;
    sc_in< sc_lv<18> > im_V;
    sc_in< sc_lv<18> > re_V;
    sc_in< sc_lv<18> > zoom_factor_V;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > v_assign_ap_vld;
    sc_out< sc_logic > m_axis_video_TVALID;
    sc_in< sc_logic > m_axis_video_TREADY;
    sc_in< sc_logic > im_V_ap_vld;
    sc_in< sc_logic > re_V_ap_vld;
    sc_in< sc_logic > zoom_factor_V_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    dataflow_in_loop_out(sc_module_name name);
    SC_HAS_PROCESS(dataflow_in_loop_out);

    ~dataflow_in_loop_out();

    sc_trace_file* mVcdFile;

    inner_proc* inner_proc_U0;
    sc_signal< sc_logic > inner_proc_U0_ap_start;
    sc_signal< sc_logic > inner_proc_U0_ap_done;
    sc_signal< sc_logic > inner_proc_U0_ap_continue;
    sc_signal< sc_logic > inner_proc_U0_ap_idle;
    sc_signal< sc_logic > inner_proc_U0_ap_ready;
    sc_signal< sc_lv<24> > inner_proc_U0_m_axis_video_TDATA;
    sc_signal< sc_logic > inner_proc_U0_m_axis_video_TVALID;
    sc_signal< sc_lv<3> > inner_proc_U0_m_axis_video_TKEEP;
    sc_signal< sc_lv<3> > inner_proc_U0_m_axis_video_TSTRB;
    sc_signal< sc_lv<1> > inner_proc_U0_m_axis_video_TUSER;
    sc_signal< sc_lv<1> > inner_proc_U0_m_axis_video_TLAST;
    sc_signal< sc_lv<1> > inner_proc_U0_m_axis_video_TID;
    sc_signal< sc_lv<1> > inner_proc_U0_m_axis_video_TDEST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > inner_proc_U0_start_full_n;
    sc_signal< sc_logic > inner_proc_U0_start_write;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_inner_proc_U0_ap_continue();
    void thread_inner_proc_U0_ap_start();
    void thread_inner_proc_U0_start_full_n();
    void thread_inner_proc_U0_start_write();
    void thread_m_axis_video_TDATA();
    void thread_m_axis_video_TDEST();
    void thread_m_axis_video_TID();
    void thread_m_axis_video_TKEEP();
    void thread_m_axis_video_TLAST();
    void thread_m_axis_video_TSTRB();
    void thread_m_axis_video_TUSER();
    void thread_m_axis_video_TVALID();
};

}

using namespace ap_rtl;

#endif
