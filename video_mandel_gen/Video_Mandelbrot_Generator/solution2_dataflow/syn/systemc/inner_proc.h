// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _inner_proc_HH_
#define _inner_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct inner_proc : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<10> > i_op_assign_1;
    sc_out< sc_lv<24> > m_axis_video_TDATA;
    sc_out< sc_logic > m_axis_video_TVALID;
    sc_in< sc_logic > m_axis_video_TREADY;
    sc_out< sc_lv<3> > m_axis_video_TKEEP;
    sc_out< sc_lv<3> > m_axis_video_TSTRB;
    sc_out< sc_lv<1> > m_axis_video_TUSER;
    sc_out< sc_lv<1> > m_axis_video_TLAST;
    sc_out< sc_lv<1> > m_axis_video_TID;
    sc_out< sc_lv<1> > m_axis_video_TDEST;


    // Module declarations
    inner_proc(sc_module_name name);
    SC_HAS_PROCESS(inner_proc);

    ~inner_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > m_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln30_fu_107_p2;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > tmp_last_V_fu_101_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_136;
    sc_signal< sc_lv<10> > col_fu_113_p2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<10> > tmp_V_reg_90;
    sc_signal< sc_lv<10> > or_ln33_fu_119_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<24> ap_const_lv24_FFFFFF;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<10> ap_const_lv10_31F;
    static const sc_lv<10> ap_const_lv10_320;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_col_fu_113_p2();
    void thread_icmp_ln30_fu_107_p2();
    void thread_m_axis_video_TDATA();
    void thread_m_axis_video_TDATA_blk_n();
    void thread_m_axis_video_TDEST();
    void thread_m_axis_video_TID();
    void thread_m_axis_video_TKEEP();
    void thread_m_axis_video_TLAST();
    void thread_m_axis_video_TSTRB();
    void thread_m_axis_video_TUSER();
    void thread_m_axis_video_TVALID();
    void thread_or_ln33_fu_119_p2();
    void thread_tmp_last_V_fu_101_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
