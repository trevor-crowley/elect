// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "inner_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic inner_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic inner_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> inner_proc::ap_ST_fsm_state1 = "1";
const sc_lv<2> inner_proc::ap_ST_fsm_state2 = "10";
const sc_lv<32> inner_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> inner_proc::ap_const_lv32_1 = "1";
const sc_lv<1> inner_proc::ap_const_lv1_0 = "0";
const bool inner_proc::ap_const_boolean_0 = false;
const sc_lv<10> inner_proc::ap_const_lv10_0 = "0000000000";
const sc_lv<24> inner_proc::ap_const_lv24_FFFFFF = "111111111111111111111111";
const sc_lv<3> inner_proc::ap_const_lv3_0 = "000";
const sc_lv<10> inner_proc::ap_const_lv10_31F = "1100011111";
const sc_lv<10> inner_proc::ap_const_lv10_320 = "1100100000";
const sc_lv<10> inner_proc::ap_const_lv10_1 = "1";
const sc_lv<1> inner_proc::ap_const_lv1_1 = "1";
const bool inner_proc::ap_const_boolean_1 = true;

inner_proc::inner_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( icmp_ln30_fu_107_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_col_fu_113_p2);
    sensitive << ( tmp_V_reg_90 );

    SC_METHOD(thread_icmp_ln30_fu_107_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( tmp_V_reg_90 );

    SC_METHOD(thread_m_axis_video_TDATA);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );

    SC_METHOD(thread_m_axis_video_TDEST);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );

    SC_METHOD(thread_m_axis_video_TID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );

    SC_METHOD(thread_m_axis_video_TKEEP);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );

    SC_METHOD(thread_m_axis_video_TLAST);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );
    sensitive << ( tmp_last_V_reg_136 );

    SC_METHOD(thread_m_axis_video_TSTRB);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );

    SC_METHOD(thread_m_axis_video_TUSER);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );
    sensitive << ( or_ln33_fu_119_p2 );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_or_ln33_fu_119_p2);
    sensitive << ( i_op_assign_1 );
    sensitive << ( tmp_V_reg_90 );

    SC_METHOD(thread_tmp_last_V_fu_101_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i_op_assign_1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln30_fu_107_p2 );
    sensitive << ( ap_block_state2_io );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "inner_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, i_op_assign_1, "(port)i_op_assign_1");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln30_fu_107_p2, "icmp_ln30_fu_107_p2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_last_V_fu_101_p2, "tmp_last_V_fu_101_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_136, "tmp_last_V_reg_136");
    sc_trace(mVcdFile, col_fu_113_p2, "col_fu_113_p2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, tmp_V_reg_90, "tmp_V_reg_90");
    sc_trace(mVcdFile, or_ln33_fu_119_p2, "or_ln33_fu_119_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

inner_proc::~inner_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void inner_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        tmp_V_reg_90 = col_fu_113_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        tmp_V_reg_90 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        tmp_last_V_reg_136 = tmp_last_V_fu_101_p2.read();
    }
}

void inner_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void inner_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void inner_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void inner_proc::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()));
}

void inner_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void inner_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void inner_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void inner_proc::thread_col_fu_113_p2() {
    col_fu_113_p2 = (!tmp_V_reg_90.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_V_reg_90.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void inner_proc::thread_icmp_ln30_fu_107_p2() {
    icmp_ln30_fu_107_p2 = (!tmp_V_reg_90.read().is_01() || !ap_const_lv10_320.is_01())? sc_lv<1>(): sc_lv<1>(tmp_V_reg_90.read() == ap_const_lv10_320);
}

void inner_proc::thread_m_axis_video_TDATA() {
    m_axis_video_TDATA = ap_const_lv24_FFFFFF;
}

void inner_proc::thread_m_axis_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_0))) {
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY.read();
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void inner_proc::thread_m_axis_video_TDEST() {
    m_axis_video_TDEST = ap_const_lv1_0;
}

void inner_proc::thread_m_axis_video_TID() {
    m_axis_video_TID = ap_const_lv1_0;
}

void inner_proc::thread_m_axis_video_TKEEP() {
    m_axis_video_TKEEP = ap_const_lv3_0;
}

void inner_proc::thread_m_axis_video_TLAST() {
    m_axis_video_TLAST = tmp_last_V_reg_136.read();
}

void inner_proc::thread_m_axis_video_TSTRB() {
    m_axis_video_TSTRB = ap_const_lv3_0;
}

void inner_proc::thread_m_axis_video_TUSER() {
    m_axis_video_TUSER = (!or_ln33_fu_119_p2.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln33_fu_119_p2.read() == ap_const_lv10_0);
}

void inner_proc::thread_m_axis_video_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        m_axis_video_TVALID = ap_const_logic_1;
    } else {
        m_axis_video_TVALID = ap_const_logic_0;
    }
}

void inner_proc::thread_or_ln33_fu_119_p2() {
    or_ln33_fu_119_p2 = (tmp_V_reg_90.read() | i_op_assign_1.read());
}

void inner_proc::thread_tmp_last_V_fu_101_p2() {
    tmp_last_V_fu_101_p2 = (!i_op_assign_1.read().is_01() || !ap_const_lv10_31F.is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_1.read() == ap_const_lv10_31F);
}

void inner_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln30_fu_107_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

