// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "video_mandelbrot_generator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic video_mandelbrot_generator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic video_mandelbrot_generator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> video_mandelbrot_generator::ap_ST_fsm_state1 = "1";
const sc_lv<4> video_mandelbrot_generator::ap_ST_fsm_state2 = "10";
const sc_lv<4> video_mandelbrot_generator::ap_ST_fsm_state3 = "100";
const sc_lv<4> video_mandelbrot_generator::ap_ST_fsm_state4 = "1000";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> video_mandelbrot_generator::ap_const_lv1_0 = "0";
const sc_lv<1> video_mandelbrot_generator::ap_const_lv1_1 = "1";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_0 = "00";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_2 = "10";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_3 = "11";
const sc_lv<2> video_mandelbrot_generator::ap_const_lv2_1 = "1";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_2 = "10";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_3 = "11";
const int video_mandelbrot_generator::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> video_mandelbrot_generator::ap_const_lv32_1 = "1";
const bool video_mandelbrot_generator::ap_const_boolean_0 = false;
const sc_lv<3> video_mandelbrot_generator::ap_const_lv3_0 = "000";
const sc_lv<4> video_mandelbrot_generator::ap_const_lv4_0 = "0000";
const sc_lv<3> video_mandelbrot_generator::ap_const_lv3_6 = "110";
const sc_lv<3> video_mandelbrot_generator::ap_const_lv3_1 = "1";
const sc_lv<4> video_mandelbrot_generator::ap_const_lv4_8 = "1000";
const sc_lv<4> video_mandelbrot_generator::ap_const_lv4_1 = "1";
const sc_lv<4> video_mandelbrot_generator::ap_const_lv4_7 = "111";
const sc_lv<16> video_mandelbrot_generator::ap_const_lv16_0 = "0000000000000000";
const bool video_mandelbrot_generator::ap_const_boolean_1 = true;

video_mandelbrot_generator::video_mandelbrot_generator(sc_module_name name) : sc_module(name), mVcdFile(0) {
    video_mandelbrot_generator_cmd_s_axi_U = new video_mandelbrot_generator_cmd_s_axi<C_S_AXI_CMD_ADDR_WIDTH,C_S_AXI_CMD_DATA_WIDTH>("video_mandelbrot_generator_cmd_s_axi_U");
    video_mandelbrot_generator_cmd_s_axi_U->AWVALID(s_axi_cmd_AWVALID);
    video_mandelbrot_generator_cmd_s_axi_U->AWREADY(s_axi_cmd_AWREADY);
    video_mandelbrot_generator_cmd_s_axi_U->AWADDR(s_axi_cmd_AWADDR);
    video_mandelbrot_generator_cmd_s_axi_U->WVALID(s_axi_cmd_WVALID);
    video_mandelbrot_generator_cmd_s_axi_U->WREADY(s_axi_cmd_WREADY);
    video_mandelbrot_generator_cmd_s_axi_U->WDATA(s_axi_cmd_WDATA);
    video_mandelbrot_generator_cmd_s_axi_U->WSTRB(s_axi_cmd_WSTRB);
    video_mandelbrot_generator_cmd_s_axi_U->ARVALID(s_axi_cmd_ARVALID);
    video_mandelbrot_generator_cmd_s_axi_U->ARREADY(s_axi_cmd_ARREADY);
    video_mandelbrot_generator_cmd_s_axi_U->ARADDR(s_axi_cmd_ARADDR);
    video_mandelbrot_generator_cmd_s_axi_U->RVALID(s_axi_cmd_RVALID);
    video_mandelbrot_generator_cmd_s_axi_U->RREADY(s_axi_cmd_RREADY);
    video_mandelbrot_generator_cmd_s_axi_U->RDATA(s_axi_cmd_RDATA);
    video_mandelbrot_generator_cmd_s_axi_U->RRESP(s_axi_cmd_RRESP);
    video_mandelbrot_generator_cmd_s_axi_U->BVALID(s_axi_cmd_BVALID);
    video_mandelbrot_generator_cmd_s_axi_U->BREADY(s_axi_cmd_BREADY);
    video_mandelbrot_generator_cmd_s_axi_U->BRESP(s_axi_cmd_BRESP);
    video_mandelbrot_generator_cmd_s_axi_U->ACLK(ap_clk);
    video_mandelbrot_generator_cmd_s_axi_U->ARESET(ap_rst_n_inv);
    video_mandelbrot_generator_cmd_s_axi_U->ACLK_EN(ap_var_for_const0);
    video_mandelbrot_generator_cmd_s_axi_U->ap_start(ap_start);
    video_mandelbrot_generator_cmd_s_axi_U->interrupt(interrupt);
    video_mandelbrot_generator_cmd_s_axi_U->ap_ready(ap_ready);
    video_mandelbrot_generator_cmd_s_axi_U->ap_done(ap_done);
    video_mandelbrot_generator_cmd_s_axi_U->ap_idle(ap_idle);
    video_mandelbrot_generator_cmd_s_axi_U->re_V(re_V);
    video_mandelbrot_generator_cmd_s_axi_U->im_V(im_V);
    video_mandelbrot_generator_cmd_s_axi_U->zoom_factor_V(zoom_factor_V);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_ack_in);
    sensitive << ( VIDEO_OUT_V_data_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_data_out);
    sensitive << ( VIDEO_OUT_V_data_V_1_payload_A );
    sensitive << ( VIDEO_OUT_V_data_V_1_payload_B );
    sensitive << ( VIDEO_OUT_V_data_V_1_sel );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_load_A);
    sensitive << ( VIDEO_OUT_V_data_V_1_sel_wr );
    sensitive << ( VIDEO_OUT_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_load_B);
    sensitive << ( VIDEO_OUT_V_data_V_1_sel_wr );
    sensitive << ( VIDEO_OUT_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_sel);
    sensitive << ( VIDEO_OUT_V_data_V_1_sel_rd );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_state_cmp_full);
    sensitive << ( VIDEO_OUT_V_data_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_VIDEO_OUT_V_data_V_1_vld_out);
    sensitive << ( VIDEO_OUT_V_data_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_dest_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_VIDEO_OUT_V_dest_V_1_data_out);
    sensitive << ( VIDEO_OUT_V_dest_V_1_sel );

    SC_METHOD(thread_VIDEO_OUT_V_dest_V_1_sel);
    sensitive << ( VIDEO_OUT_V_dest_V_1_sel_rd );

    SC_METHOD(thread_VIDEO_OUT_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_VIDEO_OUT_V_dest_V_1_vld_out);
    sensitive << ( VIDEO_OUT_V_dest_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_id_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_VIDEO_OUT_V_id_V_1_data_out);
    sensitive << ( VIDEO_OUT_V_id_V_1_sel );

    SC_METHOD(thread_VIDEO_OUT_V_id_V_1_sel);
    sensitive << ( VIDEO_OUT_V_id_V_1_sel_rd );

    SC_METHOD(thread_VIDEO_OUT_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_VIDEO_OUT_V_id_V_1_vld_out);
    sensitive << ( VIDEO_OUT_V_id_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_keep_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_VIDEO_OUT_V_keep_V_1_data_out);
    sensitive << ( VIDEO_OUT_V_keep_V_1_sel );

    SC_METHOD(thread_VIDEO_OUT_V_keep_V_1_sel);
    sensitive << ( VIDEO_OUT_V_keep_V_1_sel_rd );

    SC_METHOD(thread_VIDEO_OUT_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_VIDEO_OUT_V_keep_V_1_vld_out);
    sensitive << ( VIDEO_OUT_V_keep_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_ack_in);
    sensitive << ( VIDEO_OUT_V_last_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_data_out);
    sensitive << ( VIDEO_OUT_V_last_V_1_payload_A );
    sensitive << ( VIDEO_OUT_V_last_V_1_payload_B );
    sensitive << ( VIDEO_OUT_V_last_V_1_sel );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_load_A);
    sensitive << ( VIDEO_OUT_V_last_V_1_sel_wr );
    sensitive << ( VIDEO_OUT_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_load_B);
    sensitive << ( VIDEO_OUT_V_last_V_1_sel_wr );
    sensitive << ( VIDEO_OUT_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_sel);
    sensitive << ( VIDEO_OUT_V_last_V_1_sel_rd );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_state_cmp_full);
    sensitive << ( VIDEO_OUT_V_last_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_VIDEO_OUT_V_last_V_1_vld_out);
    sensitive << ( VIDEO_OUT_V_last_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_strb_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_VIDEO_OUT_V_strb_V_1_data_out);
    sensitive << ( VIDEO_OUT_V_strb_V_1_sel );

    SC_METHOD(thread_VIDEO_OUT_V_strb_V_1_sel);
    sensitive << ( VIDEO_OUT_V_strb_V_1_sel_rd );

    SC_METHOD(thread_VIDEO_OUT_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_VIDEO_OUT_V_strb_V_1_vld_out);
    sensitive << ( VIDEO_OUT_V_strb_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_ack_in);
    sensitive << ( VIDEO_OUT_V_user_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_ack_out);
    sensitive << ( m_axis_video_TREADY );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_data_out);
    sensitive << ( VIDEO_OUT_V_user_V_1_payload_A );
    sensitive << ( VIDEO_OUT_V_user_V_1_payload_B );
    sensitive << ( VIDEO_OUT_V_user_V_1_sel );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_load_A);
    sensitive << ( VIDEO_OUT_V_user_V_1_sel_wr );
    sensitive << ( VIDEO_OUT_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_load_B);
    sensitive << ( VIDEO_OUT_V_user_V_1_sel_wr );
    sensitive << ( VIDEO_OUT_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_sel);
    sensitive << ( VIDEO_OUT_V_user_V_1_sel_rd );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_state_cmp_full);
    sensitive << ( VIDEO_OUT_V_user_V_1_state );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_VIDEO_OUT_V_user_V_1_vld_out);
    sensitive << ( VIDEO_OUT_V_user_V_1_state );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( VIDEO_OUT_V_data_V_1_state );
    sensitive << ( VIDEO_OUT_V_keep_V_1_state );
    sensitive << ( VIDEO_OUT_V_strb_V_1_state );
    sensitive << ( VIDEO_OUT_V_user_V_1_state );
    sensitive << ( VIDEO_OUT_V_last_V_1_state );
    sensitive << ( VIDEO_OUT_V_id_V_1_state );
    sensitive << ( VIDEO_OUT_V_dest_V_1_state );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( VIDEO_OUT_V_data_V_1_ack_in );
    sensitive << ( icmp_ln27_fu_152_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( VIDEO_OUT_V_data_V_1_state );
    sensitive << ( VIDEO_OUT_V_keep_V_1_state );
    sensitive << ( VIDEO_OUT_V_strb_V_1_state );
    sensitive << ( VIDEO_OUT_V_user_V_1_state );
    sensitive << ( VIDEO_OUT_V_last_V_1_state );
    sensitive << ( VIDEO_OUT_V_id_V_1_state );
    sensitive << ( VIDEO_OUT_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_136_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( VIDEO_OUT_V_data_V_1_state );
    sensitive << ( VIDEO_OUT_V_keep_V_1_state );
    sensitive << ( VIDEO_OUT_V_strb_V_1_state );
    sensitive << ( VIDEO_OUT_V_user_V_1_state );
    sensitive << ( VIDEO_OUT_V_last_V_1_state );
    sensitive << ( VIDEO_OUT_V_id_V_1_state );
    sensitive << ( VIDEO_OUT_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_136_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_col_fu_158_p2);
    sensitive << ( p_Val2_s_reg_125 );

    SC_METHOD(thread_icmp_ln25_fu_136_p2);
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( VIDEO_OUT_V_data_V_1_state );
    sensitive << ( VIDEO_OUT_V_keep_V_1_state );
    sensitive << ( VIDEO_OUT_V_strb_V_1_state );
    sensitive << ( VIDEO_OUT_V_user_V_1_state );
    sensitive << ( VIDEO_OUT_V_last_V_1_state );
    sensitive << ( VIDEO_OUT_V_id_V_1_state );
    sensitive << ( VIDEO_OUT_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Val2_1_reg_113 );

    SC_METHOD(thread_icmp_ln27_fu_152_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( p_Val2_s_reg_125 );

    SC_METHOD(thread_m_axis_video_TDATA);
    sensitive << ( VIDEO_OUT_V_data_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( VIDEO_OUT_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_axis_video_TDEST);
    sensitive << ( VIDEO_OUT_V_dest_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TID);
    sensitive << ( VIDEO_OUT_V_id_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TKEEP);
    sensitive << ( VIDEO_OUT_V_keep_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TLAST);
    sensitive << ( VIDEO_OUT_V_last_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TSTRB);
    sensitive << ( VIDEO_OUT_V_strb_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TUSER);
    sensitive << ( VIDEO_OUT_V_user_V_1_data_out );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( VIDEO_OUT_V_dest_V_1_state );

    SC_METHOD(thread_or_ln30_fu_164_p2);
    sensitive << ( p_Val2_1_reg_113 );
    sensitive << ( trunc_ln27_fu_148_p1 );

    SC_METHOD(thread_pixel_G_fu_184_p1);
    sensitive << ( p_Val2_s_reg_125 );

    SC_METHOD(thread_pixel_out_V_fu_188_p3);
    sensitive << ( pixel_G_fu_184_p1 );

    SC_METHOD(thread_row_fu_142_p2);
    sensitive << ( p_Val2_1_reg_113 );

    SC_METHOD(thread_tmp_last_V_fu_177_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( p_Val2_s_reg_125 );

    SC_METHOD(thread_tmp_user_V_fu_170_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( or_ln30_fu_164_p2 );

    SC_METHOD(thread_trunc_ln27_fu_148_p1);
    sensitive << ( p_Val2_s_reg_125 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axis_video_TREADY );
    sensitive << ( VIDEO_OUT_V_data_V_1_ack_in );
    sensitive << ( VIDEO_OUT_V_data_V_1_state );
    sensitive << ( VIDEO_OUT_V_keep_V_1_state );
    sensitive << ( VIDEO_OUT_V_strb_V_1_state );
    sensitive << ( VIDEO_OUT_V_user_V_1_state );
    sensitive << ( VIDEO_OUT_V_last_V_1_state );
    sensitive << ( VIDEO_OUT_V_id_V_1_state );
    sensitive << ( VIDEO_OUT_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln27_fu_152_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( icmp_ln25_fu_136_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    VIDEO_OUT_V_data_V_1_sel_rd = SC_LOGIC_0;
    VIDEO_OUT_V_data_V_1_sel_wr = SC_LOGIC_0;
    VIDEO_OUT_V_data_V_1_state = "00";
    VIDEO_OUT_V_keep_V_1_sel_rd = SC_LOGIC_0;
    VIDEO_OUT_V_keep_V_1_state = "00";
    VIDEO_OUT_V_strb_V_1_sel_rd = SC_LOGIC_0;
    VIDEO_OUT_V_strb_V_1_state = "00";
    VIDEO_OUT_V_user_V_1_sel_rd = SC_LOGIC_0;
    VIDEO_OUT_V_user_V_1_sel_wr = SC_LOGIC_0;
    VIDEO_OUT_V_user_V_1_state = "00";
    VIDEO_OUT_V_last_V_1_sel_rd = SC_LOGIC_0;
    VIDEO_OUT_V_last_V_1_sel_wr = SC_LOGIC_0;
    VIDEO_OUT_V_last_V_1_state = "00";
    VIDEO_OUT_V_id_V_1_sel_rd = SC_LOGIC_0;
    VIDEO_OUT_V_id_V_1_state = "00";
    VIDEO_OUT_V_dest_V_1_sel_rd = SC_LOGIC_0;
    VIDEO_OUT_V_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "video_mandelbrot_generator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
    sc_trace(mVcdFile, s_axi_cmd_AWVALID, "(port)s_axi_cmd_AWVALID");
    sc_trace(mVcdFile, s_axi_cmd_AWREADY, "(port)s_axi_cmd_AWREADY");
    sc_trace(mVcdFile, s_axi_cmd_AWADDR, "(port)s_axi_cmd_AWADDR");
    sc_trace(mVcdFile, s_axi_cmd_WVALID, "(port)s_axi_cmd_WVALID");
    sc_trace(mVcdFile, s_axi_cmd_WREADY, "(port)s_axi_cmd_WREADY");
    sc_trace(mVcdFile, s_axi_cmd_WDATA, "(port)s_axi_cmd_WDATA");
    sc_trace(mVcdFile, s_axi_cmd_WSTRB, "(port)s_axi_cmd_WSTRB");
    sc_trace(mVcdFile, s_axi_cmd_ARVALID, "(port)s_axi_cmd_ARVALID");
    sc_trace(mVcdFile, s_axi_cmd_ARREADY, "(port)s_axi_cmd_ARREADY");
    sc_trace(mVcdFile, s_axi_cmd_ARADDR, "(port)s_axi_cmd_ARADDR");
    sc_trace(mVcdFile, s_axi_cmd_RVALID, "(port)s_axi_cmd_RVALID");
    sc_trace(mVcdFile, s_axi_cmd_RREADY, "(port)s_axi_cmd_RREADY");
    sc_trace(mVcdFile, s_axi_cmd_RDATA, "(port)s_axi_cmd_RDATA");
    sc_trace(mVcdFile, s_axi_cmd_RRESP, "(port)s_axi_cmd_RRESP");
    sc_trace(mVcdFile, s_axi_cmd_BVALID, "(port)s_axi_cmd_BVALID");
    sc_trace(mVcdFile, s_axi_cmd_BREADY, "(port)s_axi_cmd_BREADY");
    sc_trace(mVcdFile, s_axi_cmd_BRESP, "(port)s_axi_cmd_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_data_out, "VIDEO_OUT_V_data_V_1_data_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_vld_in, "VIDEO_OUT_V_data_V_1_vld_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_vld_out, "VIDEO_OUT_V_data_V_1_vld_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_ack_in, "VIDEO_OUT_V_data_V_1_ack_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_ack_out, "VIDEO_OUT_V_data_V_1_ack_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_payload_A, "VIDEO_OUT_V_data_V_1_payload_A");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_payload_B, "VIDEO_OUT_V_data_V_1_payload_B");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_sel_rd, "VIDEO_OUT_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_sel_wr, "VIDEO_OUT_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_sel, "VIDEO_OUT_V_data_V_1_sel");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_load_A, "VIDEO_OUT_V_data_V_1_load_A");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_load_B, "VIDEO_OUT_V_data_V_1_load_B");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_state, "VIDEO_OUT_V_data_V_1_state");
    sc_trace(mVcdFile, VIDEO_OUT_V_data_V_1_state_cmp_full, "VIDEO_OUT_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, VIDEO_OUT_V_keep_V_1_data_out, "VIDEO_OUT_V_keep_V_1_data_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_keep_V_1_vld_in, "VIDEO_OUT_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_keep_V_1_vld_out, "VIDEO_OUT_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_keep_V_1_ack_out, "VIDEO_OUT_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_keep_V_1_sel_rd, "VIDEO_OUT_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, VIDEO_OUT_V_keep_V_1_sel, "VIDEO_OUT_V_keep_V_1_sel");
    sc_trace(mVcdFile, VIDEO_OUT_V_keep_V_1_state, "VIDEO_OUT_V_keep_V_1_state");
    sc_trace(mVcdFile, VIDEO_OUT_V_strb_V_1_data_out, "VIDEO_OUT_V_strb_V_1_data_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_strb_V_1_vld_in, "VIDEO_OUT_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_strb_V_1_vld_out, "VIDEO_OUT_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_strb_V_1_ack_out, "VIDEO_OUT_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_strb_V_1_sel_rd, "VIDEO_OUT_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, VIDEO_OUT_V_strb_V_1_sel, "VIDEO_OUT_V_strb_V_1_sel");
    sc_trace(mVcdFile, VIDEO_OUT_V_strb_V_1_state, "VIDEO_OUT_V_strb_V_1_state");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_data_out, "VIDEO_OUT_V_user_V_1_data_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_vld_in, "VIDEO_OUT_V_user_V_1_vld_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_vld_out, "VIDEO_OUT_V_user_V_1_vld_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_ack_in, "VIDEO_OUT_V_user_V_1_ack_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_ack_out, "VIDEO_OUT_V_user_V_1_ack_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_payload_A, "VIDEO_OUT_V_user_V_1_payload_A");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_payload_B, "VIDEO_OUT_V_user_V_1_payload_B");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_sel_rd, "VIDEO_OUT_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_sel_wr, "VIDEO_OUT_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_sel, "VIDEO_OUT_V_user_V_1_sel");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_load_A, "VIDEO_OUT_V_user_V_1_load_A");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_load_B, "VIDEO_OUT_V_user_V_1_load_B");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_state, "VIDEO_OUT_V_user_V_1_state");
    sc_trace(mVcdFile, VIDEO_OUT_V_user_V_1_state_cmp_full, "VIDEO_OUT_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_data_out, "VIDEO_OUT_V_last_V_1_data_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_vld_in, "VIDEO_OUT_V_last_V_1_vld_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_vld_out, "VIDEO_OUT_V_last_V_1_vld_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_ack_in, "VIDEO_OUT_V_last_V_1_ack_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_ack_out, "VIDEO_OUT_V_last_V_1_ack_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_payload_A, "VIDEO_OUT_V_last_V_1_payload_A");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_payload_B, "VIDEO_OUT_V_last_V_1_payload_B");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_sel_rd, "VIDEO_OUT_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_sel_wr, "VIDEO_OUT_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_sel, "VIDEO_OUT_V_last_V_1_sel");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_load_A, "VIDEO_OUT_V_last_V_1_load_A");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_load_B, "VIDEO_OUT_V_last_V_1_load_B");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_state, "VIDEO_OUT_V_last_V_1_state");
    sc_trace(mVcdFile, VIDEO_OUT_V_last_V_1_state_cmp_full, "VIDEO_OUT_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, VIDEO_OUT_V_id_V_1_data_out, "VIDEO_OUT_V_id_V_1_data_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_id_V_1_vld_in, "VIDEO_OUT_V_id_V_1_vld_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_id_V_1_vld_out, "VIDEO_OUT_V_id_V_1_vld_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_id_V_1_ack_out, "VIDEO_OUT_V_id_V_1_ack_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_id_V_1_sel_rd, "VIDEO_OUT_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, VIDEO_OUT_V_id_V_1_sel, "VIDEO_OUT_V_id_V_1_sel");
    sc_trace(mVcdFile, VIDEO_OUT_V_id_V_1_state, "VIDEO_OUT_V_id_V_1_state");
    sc_trace(mVcdFile, VIDEO_OUT_V_dest_V_1_data_out, "VIDEO_OUT_V_dest_V_1_data_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_dest_V_1_vld_in, "VIDEO_OUT_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, VIDEO_OUT_V_dest_V_1_vld_out, "VIDEO_OUT_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_dest_V_1_ack_out, "VIDEO_OUT_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, VIDEO_OUT_V_dest_V_1_sel_rd, "VIDEO_OUT_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, VIDEO_OUT_V_dest_V_1_sel, "VIDEO_OUT_V_dest_V_1_sel");
    sc_trace(mVcdFile, VIDEO_OUT_V_dest_V_1_state, "VIDEO_OUT_V_dest_V_1_state");
    sc_trace(mVcdFile, re_V, "re_V");
    sc_trace(mVcdFile, im_V, "im_V");
    sc_trace(mVcdFile, zoom_factor_V, "zoom_factor_V");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln27_fu_152_p2, "icmp_ln27_fu_152_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, row_fu_142_p2, "row_fu_142_p2");
    sc_trace(mVcdFile, row_reg_200, "row_reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, col_fu_158_p2, "col_fu_158_p2");
    sc_trace(mVcdFile, col_reg_208, "col_reg_208");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, tmp_user_V_fu_170_p2, "tmp_user_V_fu_170_p2");
    sc_trace(mVcdFile, tmp_last_V_fu_177_p2, "tmp_last_V_fu_177_p2");
    sc_trace(mVcdFile, pixel_out_V_fu_188_p3, "pixel_out_V_fu_188_p3");
    sc_trace(mVcdFile, p_Val2_1_reg_113, "p_Val2_1_reg_113");
    sc_trace(mVcdFile, p_Val2_s_reg_125, "p_Val2_s_reg_125");
    sc_trace(mVcdFile, icmp_ln25_fu_136_p2, "icmp_ln25_fu_136_p2");
    sc_trace(mVcdFile, trunc_ln27_fu_148_p1, "trunc_ln27_fu_148_p1");
    sc_trace(mVcdFile, or_ln30_fu_164_p2, "or_ln30_fu_164_p2");
    sc_trace(mVcdFile, pixel_G_fu_184_p1, "pixel_G_fu_184_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("video_mandelbrot_generator.hdltvin.dat");
    mHdltvoutHandle.open("video_mandelbrot_generator.hdltvout.dat");
}

video_mandelbrot_generator::~video_mandelbrot_generator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete video_mandelbrot_generator_cmd_s_axi_U;
}

void video_mandelbrot_generator::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void video_mandelbrot_generator::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_vld_out.read()))) {
            VIDEO_OUT_V_data_V_1_sel_rd =  (sc_logic) (~VIDEO_OUT_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_ack_in.read()))) {
            VIDEO_OUT_V_data_V_1_sel_wr =  (sc_logic) (~VIDEO_OUT_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            VIDEO_OUT_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            VIDEO_OUT_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_ack_out.read()))))) {
            VIDEO_OUT_V_data_V_1_state = ap_const_lv2_3;
        } else {
            VIDEO_OUT_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_vld_out.read()))) {
            VIDEO_OUT_V_dest_V_1_sel_rd =  (sc_logic) (~VIDEO_OUT_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_dest_V_1_state.read())))) {
            VIDEO_OUT_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read())))) {
            VIDEO_OUT_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_dest_V_1_ack_out.read()))))) {
            VIDEO_OUT_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            VIDEO_OUT_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_vld_out.read()))) {
            VIDEO_OUT_V_id_V_1_sel_rd =  (sc_logic) (~VIDEO_OUT_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_id_V_1_state.read())))) {
            VIDEO_OUT_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read())))) {
            VIDEO_OUT_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_id_V_1_ack_out.read()))))) {
            VIDEO_OUT_V_id_V_1_state = ap_const_lv2_3;
        } else {
            VIDEO_OUT_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_vld_out.read()))) {
            VIDEO_OUT_V_keep_V_1_sel_rd =  (sc_logic) (~VIDEO_OUT_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_keep_V_1_state.read())))) {
            VIDEO_OUT_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read())))) {
            VIDEO_OUT_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_keep_V_1_ack_out.read()))))) {
            VIDEO_OUT_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            VIDEO_OUT_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_vld_out.read()))) {
            VIDEO_OUT_V_last_V_1_sel_rd =  (sc_logic) (~VIDEO_OUT_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_ack_in.read()))) {
            VIDEO_OUT_V_last_V_1_sel_wr =  (sc_logic) (~VIDEO_OUT_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_last_V_1_state.read())))) {
            VIDEO_OUT_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read())))) {
            VIDEO_OUT_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_ack_out.read()))))) {
            VIDEO_OUT_V_last_V_1_state = ap_const_lv2_3;
        } else {
            VIDEO_OUT_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_vld_out.read()))) {
            VIDEO_OUT_V_strb_V_1_sel_rd =  (sc_logic) (~VIDEO_OUT_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_strb_V_1_state.read())))) {
            VIDEO_OUT_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read())))) {
            VIDEO_OUT_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_strb_V_1_ack_out.read()))))) {
            VIDEO_OUT_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            VIDEO_OUT_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_vld_out.read()))) {
            VIDEO_OUT_V_user_V_1_sel_rd =  (sc_logic) (~VIDEO_OUT_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_ack_in.read()))) {
            VIDEO_OUT_V_user_V_1_sel_wr =  (sc_logic) (~VIDEO_OUT_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VIDEO_OUT_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_user_V_1_state.read())))) {
            VIDEO_OUT_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read())))) {
            VIDEO_OUT_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VIDEO_OUT_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_ack_out.read()))))) {
            VIDEO_OUT_V_user_V_1_state = ap_const_lv2_3;
        } else {
            VIDEO_OUT_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_fu_152_p2.read()))) {
        p_Val2_1_reg_113 = row_reg_200.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_1_reg_113 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(VIDEO_OUT_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        p_Val2_s_reg_125 = col_reg_208.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                !(esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read()))) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_136_p2.read()))) {
        p_Val2_s_reg_125 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_load_A.read())) {
        VIDEO_OUT_V_data_V_1_payload_A = pixel_out_V_fu_188_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_load_B.read())) {
        VIDEO_OUT_V_data_V_1_payload_B = pixel_out_V_fu_188_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_load_A.read())) {
        VIDEO_OUT_V_last_V_1_payload_A = tmp_last_V_fu_177_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_load_B.read())) {
        VIDEO_OUT_V_last_V_1_payload_B = tmp_last_V_fu_177_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_load_A.read())) {
        VIDEO_OUT_V_user_V_1_payload_A = tmp_user_V_fu_170_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_load_B.read())) {
        VIDEO_OUT_V_user_V_1_payload_B = tmp_user_V_fu_170_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        col_reg_208 = col_fu_158_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read()))))) {
        row_reg_200 = row_fu_142_p2.read();
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_ack_in() {
    VIDEO_OUT_V_data_V_1_ack_in = VIDEO_OUT_V_data_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_ack_out() {
    VIDEO_OUT_V_data_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_data_V_1_sel.read())) {
        VIDEO_OUT_V_data_V_1_data_out = VIDEO_OUT_V_data_V_1_payload_B.read();
    } else {
        VIDEO_OUT_V_data_V_1_data_out = VIDEO_OUT_V_data_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_load_A() {
    VIDEO_OUT_V_data_V_1_load_A = (VIDEO_OUT_V_data_V_1_state_cmp_full.read() & ~VIDEO_OUT_V_data_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_load_B() {
    VIDEO_OUT_V_data_V_1_load_B = (VIDEO_OUT_V_data_V_1_sel_wr.read() & VIDEO_OUT_V_data_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_sel() {
    VIDEO_OUT_V_data_V_1_sel = VIDEO_OUT_V_data_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_state_cmp_full() {
    VIDEO_OUT_V_data_V_1_state_cmp_full =  (sc_logic) ((!VIDEO_OUT_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(VIDEO_OUT_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        VIDEO_OUT_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        VIDEO_OUT_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_data_V_1_vld_out() {
    VIDEO_OUT_V_data_V_1_vld_out = VIDEO_OUT_V_data_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_dest_V_1_ack_out() {
    VIDEO_OUT_V_dest_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_dest_V_1_data_out() {
    VIDEO_OUT_V_dest_V_1_data_out = ap_const_lv1_0;
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_dest_V_1_sel() {
    VIDEO_OUT_V_dest_V_1_sel = VIDEO_OUT_V_dest_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        VIDEO_OUT_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        VIDEO_OUT_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_dest_V_1_vld_out() {
    VIDEO_OUT_V_dest_V_1_vld_out = VIDEO_OUT_V_dest_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_id_V_1_ack_out() {
    VIDEO_OUT_V_id_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_id_V_1_data_out() {
    VIDEO_OUT_V_id_V_1_data_out = ap_const_lv1_0;
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_id_V_1_sel() {
    VIDEO_OUT_V_id_V_1_sel = VIDEO_OUT_V_id_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        VIDEO_OUT_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        VIDEO_OUT_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_id_V_1_vld_out() {
    VIDEO_OUT_V_id_V_1_vld_out = VIDEO_OUT_V_id_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_keep_V_1_ack_out() {
    VIDEO_OUT_V_keep_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_keep_V_1_data_out() {
    VIDEO_OUT_V_keep_V_1_data_out = ap_const_lv3_0;
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_keep_V_1_sel() {
    VIDEO_OUT_V_keep_V_1_sel = VIDEO_OUT_V_keep_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        VIDEO_OUT_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        VIDEO_OUT_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_keep_V_1_vld_out() {
    VIDEO_OUT_V_keep_V_1_vld_out = VIDEO_OUT_V_keep_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_ack_in() {
    VIDEO_OUT_V_last_V_1_ack_in = VIDEO_OUT_V_last_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_ack_out() {
    VIDEO_OUT_V_last_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_last_V_1_sel.read())) {
        VIDEO_OUT_V_last_V_1_data_out = VIDEO_OUT_V_last_V_1_payload_B.read();
    } else {
        VIDEO_OUT_V_last_V_1_data_out = VIDEO_OUT_V_last_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_load_A() {
    VIDEO_OUT_V_last_V_1_load_A = (VIDEO_OUT_V_last_V_1_state_cmp_full.read() & ~VIDEO_OUT_V_last_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_load_B() {
    VIDEO_OUT_V_last_V_1_load_B = (VIDEO_OUT_V_last_V_1_sel_wr.read() & VIDEO_OUT_V_last_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_sel() {
    VIDEO_OUT_V_last_V_1_sel = VIDEO_OUT_V_last_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_state_cmp_full() {
    VIDEO_OUT_V_last_V_1_state_cmp_full =  (sc_logic) ((!VIDEO_OUT_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(VIDEO_OUT_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        VIDEO_OUT_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        VIDEO_OUT_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_last_V_1_vld_out() {
    VIDEO_OUT_V_last_V_1_vld_out = VIDEO_OUT_V_last_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_strb_V_1_ack_out() {
    VIDEO_OUT_V_strb_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_strb_V_1_data_out() {
    VIDEO_OUT_V_strb_V_1_data_out = ap_const_lv3_0;
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_strb_V_1_sel() {
    VIDEO_OUT_V_strb_V_1_sel = VIDEO_OUT_V_strb_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        VIDEO_OUT_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        VIDEO_OUT_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_strb_V_1_vld_out() {
    VIDEO_OUT_V_strb_V_1_vld_out = VIDEO_OUT_V_strb_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_ack_in() {
    VIDEO_OUT_V_user_V_1_ack_in = VIDEO_OUT_V_user_V_1_state.read()[1];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_ack_out() {
    VIDEO_OUT_V_user_V_1_ack_out = m_axis_video_TREADY.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, VIDEO_OUT_V_user_V_1_sel.read())) {
        VIDEO_OUT_V_user_V_1_data_out = VIDEO_OUT_V_user_V_1_payload_B.read();
    } else {
        VIDEO_OUT_V_user_V_1_data_out = VIDEO_OUT_V_user_V_1_payload_A.read();
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_load_A() {
    VIDEO_OUT_V_user_V_1_load_A = (VIDEO_OUT_V_user_V_1_state_cmp_full.read() & ~VIDEO_OUT_V_user_V_1_sel_wr.read());
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_load_B() {
    VIDEO_OUT_V_user_V_1_load_B = (VIDEO_OUT_V_user_V_1_sel_wr.read() & VIDEO_OUT_V_user_V_1_state_cmp_full.read());
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_sel() {
    VIDEO_OUT_V_user_V_1_sel = VIDEO_OUT_V_user_V_1_sel_rd.read();
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_state_cmp_full() {
    VIDEO_OUT_V_user_V_1_state_cmp_full =  (sc_logic) ((!VIDEO_OUT_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(VIDEO_OUT_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        VIDEO_OUT_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        VIDEO_OUT_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_VIDEO_OUT_V_user_V_1_vld_out() {
    VIDEO_OUT_V_user_V_1_vld_out = VIDEO_OUT_V_user_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void video_mandelbrot_generator::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void video_mandelbrot_generator::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read())));
}

void video_mandelbrot_generator::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, VIDEO_OUT_V_data_V_1_ack_in.read()));
}

void video_mandelbrot_generator::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_fu_136_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_fu_136_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void video_mandelbrot_generator::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void video_mandelbrot_generator::thread_col_fu_158_p2() {
    col_fu_158_p2 = (!ap_const_lv4_1.is_01() || !p_Val2_s_reg_125.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_1) + sc_biguint<4>(p_Val2_s_reg_125.read()));
}

void video_mandelbrot_generator::thread_icmp_ln25_fu_136_p2() {
    icmp_ln25_fu_136_p2 = (!p_Val2_1_reg_113.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(p_Val2_1_reg_113.read() == ap_const_lv3_6);
}

void video_mandelbrot_generator::thread_icmp_ln27_fu_152_p2() {
    icmp_ln27_fu_152_p2 = (!p_Val2_s_reg_125.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(p_Val2_s_reg_125.read() == ap_const_lv4_8);
}

void video_mandelbrot_generator::thread_m_axis_video_TDATA() {
    m_axis_video_TDATA = VIDEO_OUT_V_data_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        m_axis_video_TDATA_blk_n = VIDEO_OUT_V_data_V_1_state.read()[1];
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void video_mandelbrot_generator::thread_m_axis_video_TDEST() {
    m_axis_video_TDEST = VIDEO_OUT_V_dest_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TID() {
    m_axis_video_TID = VIDEO_OUT_V_id_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TKEEP() {
    m_axis_video_TKEEP = VIDEO_OUT_V_keep_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TLAST() {
    m_axis_video_TLAST = VIDEO_OUT_V_last_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TSTRB() {
    m_axis_video_TSTRB = VIDEO_OUT_V_strb_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TUSER() {
    m_axis_video_TUSER = VIDEO_OUT_V_user_V_1_data_out.read();
}

void video_mandelbrot_generator::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = VIDEO_OUT_V_dest_V_1_state.read()[0];
}

void video_mandelbrot_generator::thread_or_ln30_fu_164_p2() {
    or_ln30_fu_164_p2 = (trunc_ln27_fu_148_p1.read() | p_Val2_1_reg_113.read());
}

void video_mandelbrot_generator::thread_pixel_G_fu_184_p1() {
    pixel_G_fu_184_p1 = esl_zext<8,4>(p_Val2_s_reg_125.read());
}

void video_mandelbrot_generator::thread_pixel_out_V_fu_188_p3() {
    pixel_out_V_fu_188_p3 = esl_concat<16,8>(ap_const_lv16_0, pixel_G_fu_184_p1.read());
}

void video_mandelbrot_generator::thread_row_fu_142_p2() {
    row_fu_142_p2 = (!p_Val2_1_reg_113.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(p_Val2_1_reg_113.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void video_mandelbrot_generator::thread_tmp_last_V_fu_177_p2() {
    tmp_last_V_fu_177_p2 = (!p_Val2_s_reg_125.read().is_01() || !ap_const_lv4_7.is_01())? sc_lv<1>(): sc_lv<1>(p_Val2_s_reg_125.read() == ap_const_lv4_7);
}

void video_mandelbrot_generator::thread_tmp_user_V_fu_170_p2() {
    tmp_user_V_fu_170_p2 = (!or_ln30_fu_164_p2.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln30_fu_164_p2.read() == ap_const_lv3_0);
}

void video_mandelbrot_generator::thread_trunc_ln27_fu_148_p1() {
    trunc_ln27_fu_148_p1 = p_Val2_s_reg_125.read().range(3-1, 0);
}

void video_mandelbrot_generator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_fu_136_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_1) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, VIDEO_OUT_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(VIDEO_OUT_V_data_V_1_state.read(), ap_const_lv2_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, VIDEO_OUT_V_dest_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_136_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_fu_152_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_152_p2.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(VIDEO_OUT_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void video_mandelbrot_generator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_AWVALID\" :  \"" << s_axi_cmd_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_AWREADY\" :  \"" << s_axi_cmd_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_AWADDR\" :  \"" << s_axi_cmd_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_WVALID\" :  \"" << s_axi_cmd_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_WREADY\" :  \"" << s_axi_cmd_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_WDATA\" :  \"" << s_axi_cmd_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_WSTRB\" :  \"" << s_axi_cmd_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_ARVALID\" :  \"" << s_axi_cmd_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_ARREADY\" :  \"" << s_axi_cmd_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_ARADDR\" :  \"" << s_axi_cmd_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_RVALID\" :  \"" << s_axi_cmd_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_RREADY\" :  \"" << s_axi_cmd_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_RDATA\" :  \"" << s_axi_cmd_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_RRESP\" :  \"" << s_axi_cmd_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_BVALID\" :  \"" << s_axi_cmd_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cmd_BREADY\" :  \"" << s_axi_cmd_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cmd_BRESP\" :  \"" << s_axi_cmd_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

